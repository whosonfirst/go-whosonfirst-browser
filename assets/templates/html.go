// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xef\x92\xdb\xb6\x11\xff\x7c\xf7\x14\x6b\x3a\x53\x27\x33\xa6\x18\xc7\x69\xa7\x3d\x53\xec\x9f\xb3\x3d\xbd\x69\xd2\x78\x62\xa7\x69\x3f\x65\x20\x62\x45\x22\x06\x01\x06\x00\xa5\x53\xaf\xf7\x5a\x7d\x80\x3e\x59\x07\x00\xff\x80\x14\x75\xa7\x93\x5d\xd7\x33\x3e\x91\xe0\xee\x6f\x77\x7f\x5c\x60\x17\x90\x6e\x6e\x80\xe2\x9a\x09\x84\x88\xd1\x08\x6e\x6f\xcf\xd3\x47\x2f\xbf\xbb\x7c\xf7\x8f\x37\xaf\xa0\x34\x15\xcf\xce\x53\xfb\x01\x9c\x88\x62\x19\xa1\x88\xb2\x73\x80\xb4\x44\x42\xb3\xf3\x33\x80\xd4\x30\xc3\x31\xbb\xb9\x81\xc5\xdb\x37\xdf\x2f\xfe\x4a\x2a\x84\xdb\x5b\xf8\x17\x74\x23\x57\xd4\xdf\xff\x58\xca\x27\x1a\xbe\x13\xf0\x9a\x29\x6d\xd2\xc4\xeb\x39\x88\x0a\x0d\x81\xd2\x98\x3a\xc6\x5f\x1a\xb6\x59\x46\x97\x52\x18\x14\x26\x7e\xb7\xab\x31\x82\xdc\xdf\x2d\x23\x83\xd7\x26\xb1\xce\xbc\x80\xbc\x24\x4a\xa3\x59\xfe\xf0\xee\x75\xfc\xdb\x28\x80\x11\xa4\xc2\x65\xa4\x70\x8d\x4a\xa1\x0a\x94\xa5\x62\x05\x13\xd1\x01\x8b\x7f\x8f\x7f\xf8\x63\x7c\x29\xab\x9a\x18\xb6\xe2\xa1\xd1\xab\x57\xcb\xdf\x45\x90\xec\x99\x20\x75\xcd\x31\xae\xe4\x8a\x71\x8c\xb7\xb8\x8a\x49\x5d\xc7\x39\xa9\xc9\x58\x7d\x87\xfa\x68\x6d\x6d\x88\x69\x74\xbc\x22\x2a\xd6\x66\x37\x82\x59\x71\x92\xbf\x9f\x03\xfa\x33\x11\xb4\x44\x4e\x5f\x2b\x86\x82\xf2\x5d\x48\x97\x6a\x70\x4e\x65\xc3\x70\x5b\x4b\x65\x02\xd1\x2d\xa3\xa6\x5c\x52\xdc\xb0\x1c\x63\x77\xf3\x14\x98\x60\x86\x11\x1e\xeb\x9c\x70\x5c\x3e\x7b\x0a\x15\xb9\x66\x55\x53\x05\x03\x4c\x8c\x07\x1a\x8d\xca\xdd\x59\x12\x96\x42\x3a\xeb\x83\xf9\x5a\xc9\x1a\x95\xd9\x2d\x23\xfb\x12\x2f\x38\xd1\xa6\x92\x94\xad\x19\xd2\xc0\x17\x9b\x38\xdf\x10\x6d\xbe\x6d\x1f\xc1\xed\x6d\x17\xc5\x1c\x94\x2c\x2e\xcc\x38\x4d\x88\x32\x2c\xe7\x93\xd0\x47\x0a\x9a\x19\xfc\xc9\x92\x11\x68\x8d\xf3\xf3\x0e\x65\x97\xb8\x13\x7f\xc3\xd4\x67\x1a\x48\x9f\xfd\x6f\x38\xc9\xd1\xfa\xe7\x9e\x88\x7e\xfc\x52\x36\xc2\xa8\xdd\x10\xda\x8c\x21\x8a\x3a\x57\xac\x36\x4c\x8a\x30\x1f\x8d\x9e\xcc\x25\xb8\x7a\x69\x8d\x8e\x26\xdc\x1d\xb0\xac\x22\x45\xe8\x7f\xc2\x68\x32\xd2\x5d\xd4\xa2\xf8\xbd\x66\xff\xc4\xe5\xb5\xae\x0e\xbe\x42\xb3\x65\xc6\xa0\xba\xc8\x89\xa2\x11\x6c\x08\x6f\x70\x19\xe9\xa6\xaa\x88\xda\x1d\xb2\xde\xe9\x58\xfe\x03\x0f\xfe\x40\x38\x97\x6b\x53\x62\x6d\xd9\xd2\xf7\x69\xe7\x0a\x89\x91\xea\x74\x80\x46\xf1\xbb\xe2\xbf\x4f\xfd\xd3\x24\x40\x67\xed\x7f\x91\x05\x1d\xf6\x69\xa9\x90\x7a\x87\x40\xab\x7c\x19\x25\x3f\x93\x0d\xf1\x03\x09\x97\x39\xe1\x6b\xa9\x48\x81\x8b\x8a\x89\xc5\xcf\x3a\xca\xd2\xc4\x3f\xcc\xfc\xf4\x3d\xa8\xab\x39\xab\xeb\x5d\x45\xea\x45\xae\xa4\xd6\x25\x61\x4a\x8f\x01\xee\x34\xbd\x2d\xa5\x96\x62\x6d\x89\x58\x6c\xb7\xdb\xa9\xe9\x63\x55\x15\x0a\x8a\x6a\x62\xf7\x48\xdd\x96\x5e\x86\x53\xbf\x8f\x37\x9f\x93\xbc\xc4\x53\x7d\x6f\x14\x3b\xcd\x71\x81\xe6\x44\x45\x52\xb1\xf5\x6e\xac\x0b\x67\x70\x06\x47\xbf\xaa\x02\xe5\xcf\x5a\xee\x65\xca\xb1\xea\x1c\xc9\x9a\xa3\x59\x34\x86\xf1\x7d\xd6\x1f\x04\xe1\x0a\xee\x07\x62\x94\x44\x50\x8e\xd3\xbc\xed\x19\x39\x87\x33\x48\x39\x13\xef\x41\x21\x5f\x46\xde\x62\x89\x68\x22\x28\x15\xae\x97\x51\x92\x6b\xbd\x97\xc9\xb9\xd6\xb6\xe5\x7a\xa8\x6a\x2e\xab\x4a\x0a\xaf\xed\x08\x3d\x7f\x28\x82\xed\x46\x58\xbe\x60\xb4\x75\xe1\x48\x32\x06\xb5\x83\xb3\xd7\x2e\x87\x6d\x37\x37\x80\xf8\xce\x0c\xb6\x4c\x50\xb9\x5d\x10\x4a\x5f\x6d\x50\x98\x6f\x98\x36\x28\x50\x7d\x1e\x71\x49\x68\xf4\x14\xd6\x8d\xc8\xed\x5a\x08\xf6\xfe\x73\xb4\x32\x5f\xdc\x38\xcd\xb3\x79\x2f\x6c\x1b\xf3\xf9\x17\x2f\x9c\xc8\xad\xfb\x1c\x7c\x02\x48\x13\xdf\xc9\x02\xa4\x2b\x49\x77\x40\x89\x21\x71\x00\x14\x37\x8a\xc5\x28\x68\x2d\x59\xb7\xd4\xbf\x24\x86\xbc\x6a\x47\xec\x1a\x6b\x95\x01\xdc\x9f\x94\xb2\x0d\xe4\x9c\x68\xbd\x8c\x02\x90\x08\x18\x1d\x0d\xc4\xae\x4e\x45\xfb\xd6\xac\xdc\x64\x05\xdf\x93\xa9\x89\x29\x07\xa9\x37\xc4\x94\x87\xe4\x94\xed\xa1\x43\xc8\x37\x6e\x28\x04\xe6\xc4\x30\xd3\x50\x1c\x64\xbe\x69\x47\x02\x19\x29\x8a\xa9\x50\x37\x34\x48\x55\x4c\xcc\xa0\x7d\xcb\x44\x07\x38\x96\xdc\xc7\xb4\xa2\x33\xb0\xe4\x7a\x0e\x96\x5c\xef\xc3\x5a\xc9\x19\x58\x72\x3d\x82\xcd\xce\xdd\xab\x6a\x5f\x96\x65\xa7\x22\xb5\x4d\xbe\xf4\x51\x1c\x43\xca\xaa\xa2\xcd\xef\xbd\x5a\xa8\x37\x45\x04\x25\xb2\xa2\x34\xcb\xe8\xf9\xaf\xbf\xb4\xf5\x10\xe2\x38\xeb\xf0\x12\xca\x36\xdd\x4d\x37\x56\x7e\x65\x91\x75\x4d\xc4\x4c\x5e\xc4\xae\x05\x75\x79\x3f\xe9\x21\xd2\xc4\xaa\x64\xe0\x35\x67\xb3\x27\xa6\xc4\xa0\x9f\x61\x4e\xd4\x75\x1d\x07\x2d\xd5\x5d\x1b\x12\x65\x73\x9d\x49\x0f\x22\xc6\x10\x83\x74\xdf\xaf\xb8\x3a\xde\xca\x2f\xce\x6d\x70\x15\xe1\xbc\x0b\x82\xad\x01\x7f\x69\x49\xd3\x97\x8d\xb2\xf9\xb6\x78\x6b\x14\x13\xc5\x6b\x4e\x0a\x88\x9e\xb9\x2d\xa6\xed\x49\x0e\xb9\xda\xee\x82\x72\xaf\x1c\x65\x3f\x22\xac\x90\x33\xdc\x20\x98\x92\x69\x50\x98\x4b\x45\xc1\x48\x58\x21\xb4\x52\x8b\xd6\xa1\xd6\x0b\xe4\x1a\xef\x77\xe5\xcb\x63\x5d\x11\xd2\x8c\xdc\x11\x12\x6c\xa2\xa1\x3a\xcd\x31\x6f\xd4\xde\x09\x9b\x57\x1d\xa1\x8e\xc6\xb3\x3e\x99\x6c\xe6\xb4\x37\x67\x7d\xaa\x86\xce\x51\x34\x84\x71\x1d\xcd\x52\xff\x12\x6b\x85\x39\x31\x48\x4f\x63\x9f\xf6\xfa\x51\xf6\x2e\x08\xae\x24\x1a\x56\x88\x02\x2a\xa2\xde\x23\x05\xa2\x61\x10\x9d\x06\xeb\xc2\x3b\x3f\x9b\xf3\xef\x6d\x53\xa3\xd2\x48\x0f\xf9\x67\xff\xcf\xda\xd5\xbd\x22\xac\x76\x60\x4a\x84\xb5\xe4\x5c\x6e\x99\x28\x5a\x59\x7d\xe1\xd6\x7a\x48\x1b\x3e\x3b\x13\xec\xba\x8d\xaa\xe5\xcd\xfe\xbb\xb9\x01\x45\x44\x81\xf0\x19\x7b\x0a\x9f\x69\xb8\x58\x7a\x2f\x07\x1f\xff\xb4\x6b\xdd\x72\xb8\x9c\x65\x29\xe9\xaa\xa6\x5f\x25\x3e\xd3\x6e\xc5\x9a\x31\xc7\x28\x4c\x66\x3c\x5b\xef\x0e\xaf\xfc\x1e\x28\xeb\xae\xd2\x84\x64\x69\xc2\x59\xe8\x6b\x47\xab\x4f\x93\x86\xb7\xcf\x16\xfe\x63\xcc\xbd\x25\xff\x10\xf5\x4c\x14\x73\xdc\x7b\x98\x90\xfb\x9e\x72\x7d\x07\xdf\x47\xb1\x7d\x2f\xd3\xba\x4b\xcf\xff\x17\xc7\x23\x7e\x7b\x76\x17\x3e\x25\x83\x87\xed\x62\xdf\x4f\xd7\x86\xef\xcd\xcf\x15\xd1\x2c\x77\x81\xdb\x68\x0e\x6e\xd8\x0e\xce\x44\x46\x87\xd5\xd7\x15\xa0\x6e\x91\x26\x82\x02\x33\xf6\xf5\xd8\xc2\xb8\x41\xf8\xe1\xfb\x2b\x87\xd4\x11\x56\x1a\x53\xeb\x8b\x24\xb1\x04\x2c\xc2\xae\x48\xaa\x22\xd9\x6b\x1c\x66\x4c\x2b\xe4\xb6\xcb\x08\x6a\x85\x17\xb6\x54\x2d\x3c\x57\xd3\xbc\xea\x5b\x8b\x28\xfe\xda\x27\x92\x8d\x3a\x48\xa3\x27\x1a\x7c\x47\xd2\xc5\x9d\x4b\x8a\x59\xfc\x75\x9a\xb8\x0b\xd8\x96\x2c\x2f\x81\x09\xca\xec\x5a\xa2\x81\x19\x37\xe9\xfb\xa0\x1e\x97\x0c\x15\x51\x79\xb9\x8b\xb2\xaa\xe1\x86\xd5\x1c\x5b\x44\x6d\xfd\x82\x15\xe6\xa4\xd1\xb8\x4f\x43\xc1\x4c\xd9\xac\x6c\x47\x1c\x36\xaa\xc9\x28\x4d\xfb\xbd\x5b\x62\x14\x62\x52\x11\x6d\x50\x25\xc1\xf0\x56\xae\x1f\x7b\x6b\x3f\xd9\x17\xe3\xbc\xab\x6b\x14\x1a\xb4\xac\xd0\xb0\x0a\x75\xc0\xce\xd9\x4c\x11\x0a\x18\x7a\xfe\x10\x86\x9e\x8f\x19\xaa\x90\x08\xc7\x4e\x65\x1b\x11\xe0\x58\x30\xc3\x2a\x62\x90\xef\xa0\x24\x1b\x3c\x81\xb1\x1a\xa5\x7d\xf4\x49\x88\x23\xaa\x68\x10\xc8\x4a\x36\xc6\x57\x4d\x2d\x95\x01\xb9\xb6\x37\xa2\x38\x9e\xc2\xaf\x1e\x42\xe1\xb3\x39\x0a\xb7\xe8\xf8\x12\x4f\x0c\xac\xa4\x29\x51\x21\x05\xa3\x76\x76\x61\x33\x12\x6a\x26\x80\xca\xad\x08\x4b\xfb\x93\x03\xe9\xc8\xaa\x0a\x29\x23\xa6\x63\xf7\xd3\xa7\x23\x67\x6b\xb4\xf1\xe6\xb2\xaa\xb9\x9b\x40\x34\x58\xd6\xee\x66\xf2\xd9\xfd\x4c\x5e\xed\x33\x69\x39\xb4\x54\x6d\x11\x88\xfa\x44\x51\x36\x22\x47\x65\x08\x13\x8e\x60\xff\x2e\xdb\x1a\xd5\xa6\xb5\x7f\x5b\x52\xe0\x34\x89\xba\x08\xaf\x8c\xa5\xc9\x4b\xfb\x16\x62\x5a\x66\x46\xf4\x7c\x9c\x82\x33\x85\xcc\xf6\x0b\xc1\xbe\xd4\x74\x2a\xf4\xcd\x54\x57\x4d\x56\xb2\x11\xb6\x88\xc3\x4a\x5e\x8f\x96\xff\xc7\xb3\x3e\x17\x68\xd7\x29\xb5\x83\xb9\xc1\xb8\x03\x5b\xc9\xeb\x61\xd5\x1f\x6d\xde\x9e\xc2\x81\x8d\x5a\xf0\x20\xdc\x95\x8d\x87\x03\x79\xf7\xf2\xba\x1a\x56\x2b\x26\x72\x56\x13\x0e\x39\x0a\xa3\x24\xa3\x1f\x1c\x4a\x07\x34\xc4\x11\x6c\x69\x07\xaf\xa6\x2e\x75\x75\xad\xeb\xbf\x6d\xe9\x0f\x76\x8a\xb6\xe2\xf5\x6d\x38\xc7\xb5\x89\x75\x49\xd4\x7b\x5b\xde\xdb\x56\x6c\xae\x47\x1f\x72\xb9\x0f\x44\x63\x6e\x86\xde\xf3\x1e\xad\xb8\x56\x68\xcc\xce\xee\xf2\xac\x0f\x6d\x63\x7c\x8c\xa2\x22\xdb\x4e\xab\x6b\x15\xfd\x75\xfb\x19\x44\xa3\x6c\x21\xe9\xc3\x71\x8d\xcf\x1c\xb8\xdf\x19\x4c\xe3\x68\xc1\xcb\xe7\xe0\x8e\x94\xfc\xb1\x4e\x4c\x38\x2b\xc4\x85\xa5\x09\x1e\xb1\xaa\x96\xca\x10\x61\x5e\xf8\x73\x90\x16\x27\xf3\x9f\xc1\xbb\x9e\x18\x20\x22\x2f\xa5\x8a\xb2\xff\xfc\xdb\x2f\x65\xe5\xf3\x6c\x68\x71\x01\x52\x43\x56\xed\x17\x88\xee\xf6\x51\x1c\x9f\x9f\xb9\x2f\x24\x55\xe6\x2e\xec\x65\x99\xfd\xea\xf1\xb3\xdf\x7c\xf9\x22\x4d\x4c\x19\x8e\xbe\x75\xa6\xa6\xa3\x7f\x23\xbc\xc1\xe9\xe0\xa5\x8d\x9f\xa2\xc8\x83\x27\x69\xd2\x19\xb1\xdb\xff\xce\x03\x3f\x66\x75\xec\x4a\xec\xf7\x7f\xad\x4e\x27\x41\x0f\x6f\xb9\x82\x66\x6f\x6e\xb7\x6a\x93\xd4\xd0\xd3\xa1\xae\xf4\x3b\xd5\xe0\x47\x80\xf9\x8b\xb0\x55\x71\x8a\xe3\x09\x09\x89\xe8\xae\x3d\x1b\x48\xb4\x2d\x49\x27\x91\xe1\x74\x3f\x0a\x17\x1e\xe9\x43\xa9\xe8\x50\x8e\x65\xa2\x4b\x89\x61\xa3\xdc\x65\xd2\xd1\x36\xe7\xb7\xf3\xbd\xe9\x93\x80\xa6\x34\x58\x90\x43\x92\x0f\x0d\x75\xd8\xa5\x3f\x38\xd4\xf9\x93\x81\x13\x42\x0d\x80\xe6\x42\x3d\x01\xe4\x54\x16\x5c\x63\x7b\x22\x0d\x93\x5d\xfa\x07\x84\x60\x91\x3e\x9c\x08\x8f\x72\x98\x89\x33\xe8\x8b\x54\x9a\x0c\x4b\x74\x5f\x75\x0e\x14\x97\xa1\x9b\x3e\x58\x5f\xac\x4a\xd0\x74\xf7\x97\xb3\x3d\xf9\x51\x45\xa4\x2b\x89\xdd\x2f\x0b\x82\xd3\xfb\x59\xeb\x5a\x36\x2a\x47\x5b\xba\xfc\x45\x58\xbb\xda\x47\xc7\x16\xaf\xfe\xd8\x66\x72\xd6\xf1\xa0\xad\x7b\xf6\x10\xe9\xbd\xa3\xa4\x59\xbb\xf3\x6d\x7b\x6c\x0d\xf4\x80\xdf\x63\x2d\xe1\xf6\x36\x59\x71\xb9\xea\x9a\xf6\x91\xc0\x9e\x7f\x1f\x13\x75\x12\x47\x7f\x46\x33\xf4\x3a\x7d\x8f\x33\x3a\x97\x9f\x9e\xfa\xaf\xa5\x34\xa8\x86\x83\xff\x29\x13\xed\x77\xe4\xce\xe9\xc9\xcf\x0b\xb2\xc9\xef\x0d\x5c\x47\x7b\xd7\x17\x01\xc1\x88\xfb\xce\x69\x25\xe9\x2e\x3b\x4f\x13\xff\xfb\xaa\xa1\xbb\xff\x6f\x00\x00\x00\xff\xff\x71\x29\xba\xc3\x8c\x25\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 9612, mode: os.FileMode(420), modTime: time.Unix(1576365150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

