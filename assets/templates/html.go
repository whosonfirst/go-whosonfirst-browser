// Code generated by go-bindata.
// sources:
// templates/html/id.html
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xfd\x92\xdb\xb6\x11\xff\xfb\xee\x29\x36\x74\xa6\x4e\x66\x4c\x31\x8e\xd3\x4e\x7b\xa6\xd8\x8f\xb3\x3d\xbd\x69\xd2\x78\xfc\xd1\xb4\x7f\x65\x40\x62\x25\xc2\x06\x01\x06\x00\xa5\x53\xaf\xf7\x5a\x7d\x80\x3e\x59\x07\x00\x3f\x40\x8a\x3a\xeb\x64\xd7\xf5\x8c\x4f\x24\xb8\xfb\xdb\xdd\x1f\x96\xd8\x05\xa4\x9b\x1b\xa0\xb8\x62\x02\x21\x62\x34\x82\xdb\xdb\xf3\xf4\x8b\x67\x3f\x5e\xbe\xf9\xc7\xcb\xe7\x50\x9a\x8a\x67\xe7\xa9\xfd\x00\x4e\xc4\x7a\x19\xa1\x88\xb2\x73\x80\xb4\x44\x42\xb3\xf3\x33\x80\xd4\x30\xc3\x31\xbb\xb9\x81\xc5\xeb\x97\xaf\x16\x7f\x25\x15\xc2\xed\x2d\xfc\x0b\xba\x91\x2b\xea\xef\x7f\x2a\xe5\x43\x0d\x3f\x0a\x78\xc1\x94\x36\x69\xe2\xf5\x1c\x44\x85\x86\x40\x69\x4c\x1d\xe3\x2f\x0d\xdb\x2c\xa3\x4b\x29\x0c\x0a\x13\xbf\xd9\xd5\x18\x41\xe1\xef\x96\x91\xc1\x6b\x93\x58\x67\x9e\x42\x51\x12\xa5\xd1\x2c\xdf\xbe\x79\x11\xff\x36\x0a\x60\x04\xa9\x70\x19\x29\x5c\xa1\x52\xa8\x02\x65\xa9\xd8\x9a\x89\xe8\x80\xc5\xbf\xc7\x6f\xff\x18\x5f\xca\xaa\x26\x86\xe5\x3c\x34\x7a\xf5\x7c\xf9\xbb\x08\x92\x3d\x13\xa4\xae\x39\xc6\x95\xcc\x19\xc7\x78\x8b\x79\x4c\xea\x3a\x2e\x48\x4d\xc6\xea\x3b\xd4\x47\x6b\x6b\x43\x4c\xa3\xe3\x9c\xa8\x58\x9b\xdd\x08\x26\xe7\xa4\x78\x3f\x07\xf4\x67\x22\x68\x89\x9c\xbe\x50\x0c\x05\xe5\xbb\x90\x2e\xd5\xe0\x9c\xca\x86\xe1\xb6\x96\xca\x04\xa2\x5b\x46\x4d\xb9\xa4\xb8\x61\x05\xc6\xee\xe6\x11\x30\xc1\x0c\x23\x3c\xd6\x05\xe1\xb8\x7c\xfc\x08\x2a\x72\xcd\xaa\xa6\x0a\x06\x98\x18\x0f\x34\x1a\x95\xbb\xb3\x24\x2c\x85\x74\xd6\x07\xf3\xb5\x92\x35\x2a\xb3\x5b\x46\x76\x12\x2f\x38\xd1\xa6\x92\x94\xad\x18\xd2\xc0\x17\x9b\x38\xdf\x13\x6d\x7e\x68\x1f\xc1\xed\x6d\x17\xc5\x1c\x94\x5c\x5f\x98\x71\x9a\x10\x65\x58\xc1\x27\xa1\x8f\x14\x34\x33\xf8\xb3\x25\x23\xd0\x1a\xe7\xe7\x1d\xca\x2e\x71\x27\xfe\x86\xa9\xcf\x34\x90\x3e\xfb\x5f\x72\x52\xa0\xf5\xcf\x3d\x11\xfd\xf8\xa5\x6c\x84\x51\xbb\x21\xb4\x19\x43\x14\x75\xa1\x58\x6d\x98\x14\x61\x3e\x1a\x3d\x79\x97\xe0\xea\x99\x35\x3a\x7a\xe1\xee\x80\x65\x15\x59\x87\xfe\x27\xb5\x58\x27\x23\xe5\xdf\x6b\xf6\x4f\x5c\x5e\xeb\xea\xe0\xfc\x99\x2d\x33\x06\xd5\x45\x41\x14\x8d\x60\x43\x78\x83\xcb\x48\x37\x55\x45\xd4\xee\x90\xe9\x4e\xc7\x92\x1f\x98\xff\x03\xe1\x5c\xae\x4c\x89\xb5\xa5\x4a\x7f\x48\xbb\x50\x48\x8c\x54\xa7\x03\x34\x8a\x87\xc1\x33\x9a\x1c\x45\x5c\xa7\xfe\x79\x66\xbf\xb3\xf6\xbf\x48\x81\x0e\xfb\x84\x3c\x48\xbd\x37\xa0\x55\xb1\x8c\x92\x77\x64\x43\xfc\x40\xc2\x65\x41\xf8\x4a\x2a\xb2\xc6\x45\xc5\xc4\xe2\x9d\x8e\xb2\x34\xf1\x0f\x33\xff\xe2\x1e\xd4\xd5\x9c\xd5\xf5\xae\x22\xf5\xa2\x50\x52\xeb\x92\x30\xa5\xc7\x00\x77\x9a\xde\x96\x52\x4b\xb1\xb2\x2c\x2c\xb6\xdb\xed\xd4\xf4\xb1\xaa\x0a\x05\x45\x35\xb1\x7b\xa4\x6e\xcb\x2d\xc3\xa9\xdf\xc7\x9b\x2f\x48\x51\xe2\xa9\xbe\x37\x8a\x9d\xe6\xb8\x40\x73\xa2\x22\xa9\xd8\x6a\x37\xd6\x85\x33\x38\x83\xa3\xa7\x6a\x8d\xf2\x9d\x96\x7b\x99\x72\xac\x3a\x47\xb2\xe2\x68\x16\x8d\x61\x7c\x9f\xf5\x7b\x41\xb8\x52\xfb\x91\x18\x25\x11\x94\xe3\x34\x6f\x5b\x46\xe0\x0c\x52\xce\xc4\x7b\x50\xc8\x97\x91\x37\x57\x22\x9a\x08\x4a\x85\xab\x65\x94\x14\x5a\xef\xa5\x71\xa1\xb5\xed\xb4\xee\xab\x5a\xc8\xaa\x92\xc2\x6b\x7b\x36\xef\xa5\x6e\x3b\x10\x56\x2c\x18\x6d\xed\x1f\xcb\x43\xae\xe4\x56\xa3\x5a\x54\xa4\xd6\xa7\x4e\x69\x87\xc1\xe8\x69\x73\x11\xe8\xdb\xd6\x65\xcf\x0d\x8b\xf3\x45\x1c\x07\x70\x76\x65\x6e\xbb\xca\x01\xd3\x77\x88\xb0\x65\x82\xca\xed\x82\x50\xfa\x7c\x83\xc2\x7c\xcf\xb4\x41\x81\xea\xab\x88\x4b\x42\xa3\x47\xb0\x6a\x44\x61\x97\x65\xb0\xf7\x5f\xa1\x95\xf9\xfa\xc6\x69\x9e\xdd\xe1\xd4\x57\x5f\x3f\x75\x32\xb7\xee\x33\x0c\x31\x8e\xdd\x72\x01\x90\x26\xbe\xb7\x06\x48\x73\x49\x77\x40\x89\x21\x71\x00\x19\x37\x8a\xc5\x28\x68\x2d\x59\x57\x7f\x9e\x11\x43\x9e\xb7\x23\x76\xe1\xb7\xca\x00\xee\x4f\x4a\xd9\x06\x0a\x4e\xb4\x5e\x46\x01\x48\x04\x8c\x8e\x06\x62\x57\x3c\xa3\x7d\x6b\x56\x6e\x52\x56\xf6\x64\x6a\x62\xca\x41\xea\x25\x31\xe5\x21\x39\x65\xbb\xfa\x10\xf2\xa5\x1b\x0a\x81\x39\x31\xcc\x34\x14\x07\x99\xef\xdb\x91\x40\x46\x8a\xf5\x54\xa8\x1b\x1a\xa4\x2a\x26\x66\xd0\x7e\x60\xa2\x03\x1c\x4b\xee\x63\x5a\xd1\x19\x58\x72\x3d\x07\x4b\xae\xf7\x61\xad\xe4\x0c\x2c\xb9\x1e\xc1\x66\xe7\x6e\xaa\xda\xc9\xb2\xec\x54\xa4\xb6\x69\x68\xd3\x15\x52\x56\xad\xdb\xc4\x9f\xf6\x2a\x0b\xbd\x59\x47\x50\x22\x5b\x97\x66\x19\x3d\xf9\xf5\x37\xb6\x4e\xbb\x4c\x6a\xf1\x12\xca\x36\xdd\x4d\x37\x56\x7e\x6b\x91\x75\x4d\xc4\x4c\x5e\xc4\xae\x29\x76\x6f\xc0\xa4\xb1\x49\x13\xab\x92\x81\xd7\x9c\xcd\x9e\x98\x12\x83\xfe\xa5\x73\xa2\xae\x15\x3a\x68\xa9\xee\x7a\xa3\x28\x9b\x6b\x97\x7a\x10\x31\x86\x18\xa4\xfb\x26\xca\xf5\x17\xad\xfc\xe2\xdc\x06\x57\x11\xce\xbb\x20\xd8\x0a\xf0\x97\x96\x34\x7d\xd9\x28\x9b\x6f\x8b\xd7\x46\x31\xb1\x7e\xc1\xc9\x1a\xa2\xc7\x6e\xd3\x6b\x1b\xa5\x43\xae\xb6\xfb\xb2\xc2\x2b\x47\xd9\x4f\x08\x39\x72\x86\x1b\x04\x53\x32\x0d\x0a\x0b\xa9\x28\x18\x09\x39\x42\x2b\xb5\x68\x1d\x6a\xbd\x40\xae\xf1\xc3\xae\x7c\x73\xac\x2b\x42\x9a\x91\x3b\x42\x82\x4d\x34\x54\xa7\x39\xe6\x8d\xda\x3b\x61\xf3\xaa\x23\xd4\xd1\x78\xd6\x27\x93\xcd\x9c\xf6\xe6\xac\x4f\xd5\xd0\x39\x8a\x86\x30\xae\xa3\x59\xea\x9f\x61\xad\xb0\x20\x06\xe9\x69\xec\xd3\x5e\x3f\xca\xde\x04\xc1\x95\x44\x43\x8e\x28\xa0\x22\xea\x3d\x52\x20\x1a\x06\xd1\x69\xb0\x2e\xbc\xf3\xb3\x39\xff\x5e\x37\x35\x2a\x8d\xf4\x90\x7f\xf6\xff\xac\x5d\xdd\x2b\x42\xbe\x03\x53\x22\xac\x24\xe7\x72\xcb\xc4\xba\x95\xd5\x17\x6e\xd1\x87\xb4\xe1\xb3\x6f\x82\x5d\xb7\x51\xb5\xbc\xd9\x7f\x37\x37\xa0\x88\x58\x23\x7c\xc9\x1e\xc1\x97\x1a\x2e\x96\xde\xcb\xc1\xc7\x3f\xed\x5a\xb7\x1c\x2e\x67\x59\x4a\xba\x9a\xee\x57\x89\x2f\xb5\x5b\xb1\x66\xcc\x31\x0a\x93\x37\x9e\xad\x76\x87\x57\x7e\x0f\x94\x75\x57\x69\x42\xb2\x34\xe1\x2c\xf4\xb5\xa3\xd5\xa7\x49\xc3\xdb\x67\x0b\xff\x31\xe6\xde\x92\x7f\x88\x7a\x26\xd6\x73\xdc\x7b\x98\x90\xfb\x9e\x72\x7d\x07\xdf\x47\xb1\xfd\x41\xa6\x75\x97\x9e\xff\x2f\x8e\x47\xfc\xf6\xec\x2e\x7c\x4a\x06\x0f\xdb\xc5\xbe\x7f\x5d\x1b\xbe\xf7\x7e\xe6\x44\xb3\xc2\x05\x6e\xa3\x39\xb8\x8b\x3c\xf8\x26\x32\x3a\xac\xbe\xae\x00\x75\x8b\x34\x11\x14\x98\xb1\xd3\x63\x0b\xe3\x06\xe1\xed\xab\x2b\x87\xd4\x11\x56\x1a\x53\xeb\x8b\x24\xb1\x04\x2c\xc2\xfe\x48\xaa\x61\xcf\xd9\x37\x0e\x33\xa6\x15\x72\xdb\x65\x04\xb5\xc2\x0b\x5b\xaa\x16\x9e\xab\x69\x5e\xf5\xad\x45\x14\x7f\xe7\x13\xc9\x46\x1d\xa4\xd1\x43\x0d\xbe\x23\xe9\xe2\x2e\x24\xc5\x2c\xfe\x2e\x4d\xdc\x05\x6c\x4b\x56\x94\xc0\x04\x65\x76\x2d\xd1\xc0\x8c\x7b\xe9\xfb\xa0\x1e\x94\x0c\x15\x51\x45\xb9\x8b\xb2\xaa\xe1\x86\xd5\x1c\x5b\x44\x6d\xfd\x82\x1c\x0b\xd2\x68\xdc\xa7\x61\xcd\x4c\xd9\xe4\xb6\x59\x0f\x3b\xd8\x64\x94\xa6\xfd\x9e\x32\x31\x0a\x31\xa9\x88\x36\xa8\x92\x60\x78\x2b\x57\x0f\xbc\xb5\x9f\xed\xc4\x38\xef\xea\x1a\x85\x06\x2d\x2b\x34\xac\x42\x1d\xb0\x73\x36\x53\x84\x02\x86\x9e\xdc\x87\xa1\x27\x63\x86\x2a\x24\xc2\xb1\x53\xd9\x46\x04\x38\xae\x99\x61\x15\x31\xc8\x77\x50\x92\x0d\x9e\xc0\x58\x8d\xd2\x3e\xfa\x2c\xc4\x11\xb5\x6e\x10\x48\x2e\x1b\xe3\xab\xa6\x96\xca\x80\x5c\xd9\x1b\xb1\x3e\x9e\xc2\x6f\xef\x43\xe1\xe3\x39\x0a\xb7\xe8\xf8\x12\x0f\x0d\xe4\xd2\x94\xa8\x90\x82\x51\x3b\xbb\xb0\x19\x09\x35\x13\x40\xe5\x56\x84\xa5\xfd\xe1\x81\x74\x64\x55\x85\x94\x11\xd3\xb1\xfb\xf9\xd3\x91\xb3\x15\xda\x78\x0b\x59\xd5\xdc\xbd\x40\x34\x58\xd6\xee\x66\xf2\xf1\x87\x99\xbc\xda\x67\xd2\x72\x68\xa9\xda\x22\x10\xf5\x99\xa2\x6c\x44\x81\xca\x10\x26\x1c\xc1\x7e\x2e\xdb\x1a\xd5\xa6\xb5\x9f\x2d\x29\x70\x9a\x44\x5d\x84\x57\xc6\xd2\xe4\xa5\x7d\x0b\x31\x2d\x33\x23\x7a\x3e\x4d\xc1\x99\x42\x66\xfb\x85\x60\x5f\x6a\xfa\x2a\xf4\xcd\x54\x57\x4d\x72\xd9\x08\x5b\xc4\x21\x97\xd7\xa3\xe5\xff\xc1\xac\xcf\x6b\xb4\xeb\x94\xda\xc1\xdc\x60\xdc\x81\xe5\xf2\x7a\x58\xf5\x47\x9b\xb7\x47\x70\x60\xa3\x16\x3c\x08\x77\x65\xe3\xe1\x40\xde\x4d\x5e\x57\xc3\x6a\xc5\x44\xc1\x6a\xc2\xa1\x40\x61\x94\x64\xf4\xa3\x43\xe9\x80\x86\x38\x82\x2d\xed\xe0\xd5\xd4\xa5\xae\xae\x75\xfd\xb7\x2d\xfd\xc1\x4e\xd1\x56\xbc\xbe\x0d\xe7\xb8\x32\xb1\x2e\x89\x7a\x6f\xcb\x7b\xdb\x8a\xcd\xf5\xe8\x43\x2e\xf7\x81\x68\x2c\xcc\xd0\x7b\x7e\x40\x2b\xae\x15\x1a\xb3\xb3\xbb\x3c\xeb\x43\xdb\x18\x1f\xa3\xa8\xc8\xb6\xd3\xea\x5a\x45\x7f\xdd\x7e\x06\xd1\x28\x5b\x48\xfa\x70\x5c\xe3\x33\x07\xee\x77\x06\xd3\x38\x5a\xf0\xf2\x09\xb8\x03\x2f\x7f\xc0\x13\x13\xce\xd6\xe2\xc2\xd2\x04\x5f\xb0\xaa\x96\xca\x10\x61\x9e\xfa\x73\x90\x16\x27\xf3\x9f\xc1\x5c\x4f\x0c\x10\x51\x94\x52\x45\xd9\x7f\xfe\xed\x97\xb2\xf2\x49\x36\xb4\xb8\x00\xa9\x21\x79\xfb\x95\xa6\xbb\x75\x87\x4d\xee\x2b\x52\x95\xb9\x0b\x7b\x59\x66\xbf\x7a\xf0\xf8\x37\xdf\x3c\x4d\x13\x53\x86\xa3\xaf\x9d\xa9\xe9\xe8\xdf\x08\x6f\x70\x3a\x78\x69\xe3\xa7\x28\x8a\xe0\x49\x9a\x74\x46\xfc\x41\x92\xf7\xc0\x8f\x59\x1d\xbb\x12\xfb\xfd\x5f\xab\xd3\x49\xd0\xc3\x5b\xae\xa0\xd9\x9b\xdb\xad\xda\x24\x35\xf4\x74\xa8\x2b\xfd\x46\x35\xf8\x09\x60\xfe\x22\x6c\x55\x9c\xe2\x78\x42\x42\x22\xba\x6b\xcf\x06\x12\x6d\x4b\xd2\x49\x64\x38\xdd\x4f\xc2\x85\x47\xfa\x58\x2a\x3a\x94\x63\x99\xe8\x52\x62\xd8\x28\x77\x99\x74\xb4\xcd\xf9\xed\x7c\x6f\xfa\x24\xa0\x29\x0d\x16\xe4\x90\xe4\x7d\x43\x1d\x76\xe9\xf7\x0e\x75\xfe\x64\xe0\x84\x50\x03\xa0\xb9\x50\x4f\x00\x39\x95\x05\xd7\xd8\x9e\x48\xc3\x64\x97\xfe\x11\x21\x58\xa4\x8f\x27\xc2\xa3\x1c\x66\xe2\x0c\xfa\x22\x95\x26\xc3\x12\xdd\x57\x9d\x03\xc5\x65\xe8\xa6\x0f\xd6\x17\xab\x12\x34\xdd\xfd\xe5\x6c\x4f\x7e\x54\x11\xe9\x4a\x62\xf7\x5b\x87\xe0\xf4\x7e\xd6\xba\x96\x8d\x2a\xd0\x96\x2e\x7f\x11\xd6\xae\xf6\xd1\xb1\xc5\xab\x3f\xb6\x99\x9c\x75\xdc\x6b\xeb\x9e\xdd\x47\x7a\xef\x28\x69\xd6\xee\x7c\xdb\x1e\x5b\x03\x3d\xe0\x2b\xac\x25\xdc\xde\x26\x39\x97\x79\xd7\xb4\x8f\x04\xf6\xfc\xfb\x94\xa8\x93\x38\xfa\x33\x9a\xa1\xd7\xe9\x7b\x9c\xd1\xb9\xfc\xf4\xd4\x7f\x25\xa5\x41\x35\x1c\xfc\x4f\x99\x68\xbf\xb8\x77\x4e\x4f\x7e\xf3\x90\x4d\x7e\x04\xe1\x3a\xda\xbb\xbe\x08\x08\x46\xdc\x77\x4e\xb9\xa4\xbb\xec\x3c\x4d\xfc\x2f\xbe\x86\xee\xfe\xbf\x01\x00\x00\xff\xff\x1b\x8d\x4b\x54\x1e\x26\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 9758, mode: os.FileMode(420), modTime: time.Unix(1576372064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x0c\xbe\x70\x59\x13\x71\x03\x11\x57\x42\x65\x2b\x38\x2d\x87\xae\x80\xe3\x24\x9e\x36\xa3\x75\xc6\xc6\x9e\xb4\x8d\xaa\xfd\xef\x28\xad\x8a\x52\x89\x1e\xc8\x25\x9e\xa7\x79\x1f\x1a\xbd\xd3\x09\x3c\x6d\x59\x08\x0c\x8b\xa7\xa3\x81\xd7\xd7\x45\xfd\xe6\xcb\xd3\x6a\xf3\xeb\xfb\x23\x74\xda\x87\xe5\xa2\x9e\x7e\x10\x50\x76\xce\x90\x98\xe5\x02\xa0\xee\x08\xfd\xf4\x98\xbe\x5a\x59\x03\x2d\x7f\x74\xf1\x6d\x81\x27\x81\x35\xe7\xa2\x75\x75\x41\xaf\x3b\x3d\x29\x42\xa7\x9a\x2c\xfd\x1e\x78\xef\xcc\x2a\x8a\x92\xa8\xdd\x8c\x89\x0c\xb4\x97\xc9\x19\xa5\xa3\x56\x93\xe1\x27\x68\x3b\xcc\x85\xd4\x3d\x6f\xd6\xf6\x83\xb9\x55\x12\xec\xc9\x99\x4c\x5b\xca\x99\xf2\x8c\x1f\x33\xef\x58\xcc\x7d\xdf\x9f\xf6\xf9\xb3\x5d\xc5\x3e\xa1\x72\x13\xe6\xd6\xdf\x1e\xdd\x47\x03\xd5\xbf\x8c\x30\xa5\x40\xb6\x8f\x0d\x07\xb2\x07\x6a\x2c\xa6\x64\x5b\x4c\x78\xab\x30\x52\xf9\x1f\x81\xa2\xa8\x43\xb1\x0d\x66\x5b\x74\xbc\x51\x6a\x02\xb6\x2f\x77\xb4\xbe\xa2\xf8\x8e\x82\x5f\x67\x26\xf1\x61\x9c\x5f\x2f\x0f\x74\x87\xb5\x67\x3a\xa4\x98\x75\xb6\x7d\x60\xaf\x9d\xf3\xb4\xe7\x96\xec\x79\x78\x00\x16\x56\xc6\x60\x4b\x8b\x81\xdc\xfb\x07\xe8\xf1\xc8\xfd\xd0\xcf\x00\x96\x5b\x60\x28\x94\xcf\xd3\x74\x0d\x27\x71\x16\x60\xaa\x4a\x75\xed\x4a\xdd\x44\x3f\xfe\x8d\x96\x96\x9b\x8e\x0b\x24\xdc\x11\x04\xda\x2a\xf0\x39\x15\x47\xc1\x10\x46\x68\x02\xca\xcb\xbb\xba\x4a\x67\x66\x75\xa1\xd6\xd5\xa5\x91\xa7\x13\x90\xf8\xa9\xab\x7f\x02\x00\x00\xff\xff\x6d\xbc\x23\x2b\xc1\x02\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 705, mode: os.FileMode(420), modTime: time.Unix(1576365693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

