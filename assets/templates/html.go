// Code generated by go-bindata.
// sources:
// www/templates/html/id.html
// www/templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwTemplatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xef\x72\xdb\xb8\x11\xff\x6c\x3f\xc5\x86\xb9\x69\xbe\x84\x62\x72\xb9\x76\x5a\x87\x62\xff\x38\xc9\xd4\xd3\xbb\x5e\x26\x7f\x7a\xed\xa7\x1b\x90\x58\x89\x48\x40\x80\x07\x80\x92\x55\xd7\xaf\xd5\x07\xe8\x93\x75\x40\x10\x24\x48\x51\x8e\xac\xa4\x69\x66\x62\x91\xe0\xee\x6f\x77\x7f\x58\x62\x17\x90\x6e\x6e\x80\xe2\x8a\x09\x84\x88\xd1\x08\x6e\x6f\xcf\xd3\x07\x2f\x7e\xbc\x7c\xf7\x8f\xd7\x2f\xa1\x34\x15\xcf\xce\x53\xfb\x01\x9c\x88\xf5\x32\x42\x11\x65\xe7\x00\x69\x89\x84\x66\xe7\x67\x00\xa9\x61\x86\x63\x76\x73\x03\x8b\xb7\xaf\xdf\x2c\xfe\x4a\x2a\x84\xdb\x5b\xf8\x17\xf8\x91\x2b\xea\xee\x7f\x2a\xe5\x23\x0d\x3f\x0a\x78\xc5\x94\x36\x69\xe2\xf4\x5a\x88\x0a\x0d\x81\xd2\x98\x3a\xc6\x5f\x1a\xb6\x59\x46\x97\x52\x18\x14\x26\x7e\xb7\xab\x31\x82\xc2\xdd\x2d\x23\x83\xd7\x26\xb1\xce\x3c\x87\xa2\x24\x4a\xa3\x59\xbe\x7f\xf7\x2a\xfe\x6d\x14\xc0\x08\x52\xe1\x32\x52\xb8\x42\xa5\x50\x05\xca\x52\xb1\x35\x13\xd1\x01\x8b\x7f\x8f\xdf\xff\x31\xbe\x94\x55\x4d\x0c\xcb\x79\x68\xf4\xea\xe5\xf2\x77\x11\x24\x7b\x26\x48\x5d\x73\x8c\x2b\x99\x33\x8e\xf1\x16\xf3\x98\xd4\x75\x5c\x90\x9a\x8c\xd5\x77\xa8\x8f\xd6\xd6\x86\x98\x46\xc7\x39\x51\xb1\x36\xbb\x11\x4c\xce\x49\xf1\x71\x0e\xe8\xcf\x44\xd0\x12\x39\x7d\xa5\x18\x0a\xca\x77\x21\x5d\xaa\xc1\x39\x95\x0d\xc3\x6d\x2d\x95\x09\x44\xb7\x8c\x9a\x72\x49\x71\xc3\x0a\x8c\xdb\x9b\xc7\xc0\x04\x33\x8c\xf0\x58\x17\x84\xe3\xf2\xe9\x63\xa8\xc8\x35\xab\x9a\x2a\x18\x60\x62\x3c\xd0\x68\x54\xed\x9d\x25\x61\x29\x64\x6b\x7d\x30\x5f\x2b\x59\xa3\x32\xbb\x65\x64\x27\xf1\x82\x13\x6d\x2a\x49\xd9\x8a\x21\x0d\x7c\xb1\x89\xf3\x3d\xd1\xe6\x87\xee\x11\xdc\xde\xfa\x28\xe6\xa0\xe4\xfa\xc2\x8c\xd3\x84\x28\xc3\x0a\x3e\x09\x7d\xa4\xa0\x99\xc1\x9f\x2d\x19\x81\xd6\x38\x3f\xef\x50\x6e\x13\x77\xe2\x6f\x98\xfa\x4c\x03\xe9\xb3\xff\x35\x27\x05\x5a\xff\xda\x27\xa2\x1f\xbf\x94\x8d\x30\x6a\x37\x84\x36\x63\x88\xa2\x2e\x14\xab\x0d\x93\x22\xcc\x47\xa3\x27\xef\x12\x5c\xbd\xb0\x46\x47\x2f\xdc\x1d\xb0\xac\x22\xeb\xd0\xff\xa4\x16\xeb\x64\xa4\xfc\x7b\xcd\xfe\x89\xcb\x6b\x5d\x1d\x9c\x3f\xb3\x65\xc6\xa0\xba\x28\x88\xa2\x11\x6c\x08\x6f\x70\x19\xe9\xa6\xaa\x88\xda\x1d\x32\xed\x75\x2c\xf9\x81\xf9\x3f\x10\xce\xe5\xca\x94\x58\x5b\xaa\xf4\xa7\xb4\x0b\x85\xc4\x48\x75\x3a\x40\xa3\x78\x18\x3c\xa3\xc9\x51\xc4\x79\xf5\xaf\x33\xfb\xde\xda\xff\x22\x05\x3c\xf6\x09\x79\x90\x3a\x6f\x40\xab\x62\x19\x25\x1f\xc8\x86\xb8\x81\x84\xcb\x82\xf0\x95\x54\x64\x8d\x8b\x8a\x89\xc5\x07\x1d\x65\x69\xe2\x1e\x66\xee\xc5\x3d\xa8\xab\x39\xab\xeb\x5d\x45\xea\x45\xa1\xa4\xd6\x25\x61\x4a\x8f\x01\xee\x34\xbd\x2d\xa5\x96\x62\x65\x59\x58\x6c\xb7\xdb\xa9\xe9\x63\x55\x15\x0a\x8a\x6a\x62\xf7\x48\xdd\x8e\x5b\x86\x53\xbf\x8f\x37\x5f\x90\xa2\xc4\x53\x7d\x6f\x14\x3b\xcd\x71\x81\xe6\x44\x45\x52\xb1\xd5\x6e\xac\x0b\x67\x70\x06\x47\x4f\xd5\x1a\xe5\x07\x2d\xf7\x32\xe5\x58\x75\x8e\x64\xc5\xd1\x2c\x1a\xc3\xf8\x3e\xeb\xf7\x82\x68\x4b\xed\x67\x62\x94\x44\x50\x8e\xd3\xbc\xed\x18\x81\x33\x48\x39\x13\x1f\x41\x21\x5f\x46\xce\x5c\x89\x68\x22\x28\x15\xae\x96\x51\x52\x68\xbd\x97\xc6\x85\xd6\xb6\xd3\xba\xaf\x6a\x21\xab\x4a\x0a\xa7\xed\xd8\xbc\x97\xba\xed\x40\x58\xb1\x60\xb4\xb3\x7f\x2c\x0f\xb9\x92\x5b\x8d\x6a\x51\x91\x5a\x9f\x3a\xa5\x1e\x83\xd1\xd3\xe6\x22\xd0\xb7\xad\xcb\x8c\x1b\xb6\x71\x4d\x5c\xe7\x0a\x90\xe6\x92\xee\x80\x12\x43\xe2\x00\x25\x6e\x14\x8b\x51\xd0\x5a\x32\xbf\xba\xbf\x20\x86\xbc\xec\x46\xec\xb2\x6a\x95\x01\xda\x3f\x29\x65\x1b\x28\x38\xd1\x7a\x19\x05\x20\x11\x30\x3a\x1a\x88\xdb\xd2\x14\xed\x5b\xb3\x72\x93\x45\x7b\x4f\xa6\x26\xa6\x1c\xa4\x5e\x13\x53\x1e\x92\x53\xb6\x67\x0e\x21\x5f\xb7\x43\x21\x30\x27\x86\x99\x86\xe2\x20\xf3\x7d\x37\x12\xc8\x48\xb1\x9e\x0a\xf9\xa1\x41\xaa\x62\x62\x06\xed\x07\x26\x3c\xe0\x58\x72\x1f\xd3\x8a\xce\xc0\x92\xeb\x39\x58\x72\xbd\x0f\x6b\x25\x67\x60\xc9\xf5\x08\x36\x3b\x6f\xa7\xaa\x9b\x2c\xcb\x4e\x45\x6a\xbb\x0d\x48\x1f\xc4\x31\xa4\xac\x5a\x77\x69\x35\xed\x04\x16\x7a\xb3\x8e\xa0\x44\xb6\x2e\xcd\x32\x7a\xf6\xeb\x27\xb6\x0a\x42\x1c\x67\x1e\x2f\xa1\x6c\xe3\x6f\xfc\x58\xf9\xad\x45\xd6\x35\x11\x33\x79\x11\xb7\x2d\x67\x5b\x94\x27\x6d\x43\x9a\x58\x95\x0c\x9c\xe6\x6c\xf6\xc4\x94\x18\x74\x29\xdd\x8a\xb6\x8d\xc6\x41\x4b\xb5\xef\x3c\xa2\x6c\xae\x19\xe9\x41\xc4\x18\x62\x90\xee\x5b\x94\xb6\x7a\x77\xf2\x8b\x73\x1b\x5c\x45\x38\xf7\x41\xb0\x15\xe0\x2f\x1d\x69\xfa\xb2\x51\x36\xdf\x16\x6f\x8d\x62\x62\xfd\x8a\x93\x35\x44\x4f\xdb\x2d\xa5\x6d\x43\x0e\xb9\xda\xed\x7a\x0a\xa7\x1c\x65\x3f\x21\xe4\xc8\x19\x6e\x10\x4c\xc9\x34\x28\x2c\xa4\xa2\x60\x24\xe4\x08\x9d\xd4\xa2\x73\xa8\xf3\x02\xb9\xc6\x4f\xbb\xf2\xe4\x58\x57\x84\x34\x23\x77\x84\x04\x9b\x68\xa8\x4e\x73\xcc\x19\xb5\x77\xc2\xe6\x95\x27\xb4\xa5\xf1\xac\x4f\x26\x9b\x39\xdd\xcd\x59\x9f\xaa\xa1\x73\x14\x0d\x61\x5c\x47\xb3\xd4\xbf\xc0\x5a\x61\x41\x0c\xd2\xd3\xd8\xa7\xbd\x7e\x94\xbd\x0b\x82\x2b\x89\x86\x1c\x51\x40\x45\xd4\x47\xa4\x40\x34\x0c\xa2\xd3\x60\xdb\xf0\xce\xcf\xe6\xfc\x7b\xdb\xd4\xa8\x34\xd2\x43\xfe\xd9\xff\xb3\x76\x75\xaf\x08\xf9\x0e\x4c\x89\xb0\x92\x9c\xcb\x2d\x13\xeb\x4e\x56\x5f\x58\x65\x80\xb4\xe1\xb3\x6f\x82\x5d\xb7\x51\x75\xbc\xd9\x7f\x37\x37\xa0\x88\x58\x23\x7c\xc3\x1e\xc3\x37\x1a\x2e\x96\xce\xcb\xc1\xc7\x3f\xed\x3a\xb7\x5a\x5c\xce\xb2\x94\xf8\x8a\xe9\x56\x89\x6f\x74\xbb\x62\xcd\x98\x63\x14\x26\x6f\x3c\x5b\xed\x0e\xaf\xfc\x0e\x28\xf3\x57\x69\x42\xb2\x34\xe1\x2c\xf4\xd5\xd3\xea\xd2\xa4\xe1\xdd\xb3\x85\xfb\x18\x73\x6f\xc9\x3f\x44\x3d\x13\xeb\x39\xee\x1d\x4c\xc8\x7d\x4f\xb9\xbe\x83\xef\xa3\xd8\xfe\x24\xd3\xda\xa7\xe7\xff\x8b\xe3\x11\xbf\x3d\xbb\x0b\x97\x92\xc1\xc3\x6e\xb1\xef\x5f\xd7\x86\xef\xbd\x9f\x39\xd1\xac\x68\x03\xb7\xd1\x1c\xdc\xa3\x1d\x7c\x13\x19\x1d\x56\xdf\xb6\x00\xf9\x45\x9a\x08\x0a\xcc\xd8\xe9\xb1\x85\x71\x83\xf0\xfe\xcd\x55\x8b\xe4\x09\x2b\x8d\xa9\xf5\x45\x92\x58\x02\x16\x61\x4b\x24\xd5\xb0\xa3\xeb\x1b\x87\x19\xd3\x0a\xb9\xed\x32\x82\x5a\xe1\x84\x2d\x55\x0b\xc7\xd5\x34\xaf\xfa\xd6\x22\x8a\xbf\x73\x89\x64\xa3\x0e\xd2\xe8\x91\x06\xd7\x91\xf8\xb8\x0b\x49\x31\x8b\xbf\x4b\x93\xf6\x02\xb6\x25\x2b\x4a\x60\x82\x32\xbb\x96\x68\x60\xa6\x7d\xe9\xfb\xa0\x1e\x96\x0c\x15\x51\x45\xb9\x8b\xb2\xaa\xe1\x86\xd5\x1c\x3b\x44\x6d\xfd\x82\x1c\x0b\xd2\x68\xdc\xa7\x61\xcd\x4c\xd9\xe4\xb6\x15\x0e\xfb\xc3\x64\x94\xa6\xfd\x8e\x2d\x31\x0a\x31\xa9\x88\x36\xa8\x92\x60\x78\x2b\x57\x0f\x9d\xb5\x9f\xed\xc4\xb4\xde\xd5\x35\x0a\x0d\x5a\x56\x68\x58\x85\x3a\x60\xe7\x6c\xa6\x08\x05\x0c\x3d\xbb\x0f\x43\xcf\xc6\x0c\x55\x48\x44\xcb\x4e\x65\x1b\x11\xe0\xb8\x66\x86\x55\xc4\x20\xdf\x41\x49\x36\x78\x02\x63\x35\x4a\xfb\xe8\xab\x10\x47\xd4\xba\x41\x20\xb9\x6c\x8c\xab\x9a\x5a\x2a\x03\x72\x65\x6f\xc4\xfa\x78\x0a\xbf\xbd\x0f\x85\x4f\xe7\x28\xdc\x62\xcb\x97\x78\x64\x20\x97\xa6\x44\x85\x14\x8c\xda\xd9\x85\xcd\x48\xa8\x99\x00\x2a\xb7\x22\x2c\xed\x8f\x0e\xa4\x23\xab\x2a\xa4\x8c\x18\xcf\xee\xd7\x4f\x47\xce\x56\x68\xe3\x2d\x64\x55\xf3\xf6\x05\xa2\xc1\xb2\x76\x37\x93\x4f\x3f\xcd\xe4\xd5\x3e\x93\x96\x43\x4b\xd5\x16\x81\xa8\xaf\x14\x65\x23\x0a\x54\x86\x30\xd1\x12\xec\xe6\xb2\xab\x51\x5d\x5a\xbb\xd9\x92\x02\xa7\x49\xe4\x23\xbc\x32\x96\x26\x27\xed\x5a\x88\x69\x99\x19\xd1\xf3\x65\x0a\xce\x14\x32\xdb\x2f\x04\xfb\x52\xd3\x57\xa1\x6f\xa6\x7c\x35\xc9\x65\x23\x6c\x11\x87\x5c\x5e\x8f\x96\xff\x87\xb3\x3e\xaf\xd1\xae\x53\x6a\x07\x73\x83\xb1\x07\xcb\xe5\xf5\xb0\xea\x8f\x36\x6f\x8f\xe1\xc0\x46\x2d\x78\x10\xee\xca\xc6\xc3\x81\x7c\x3b\x79\xbe\x86\xd5\x8a\x89\x82\xd5\x84\x43\x81\xc2\x28\xc9\xe8\x67\x87\xe2\x81\x86\x38\x82\x2d\xed\xe0\xd5\xd4\x25\x5f\xd7\x7c\xff\x6d\x4b\x7f\xb0\x53\xb4\x15\xaf\x6f\xc3\x39\xae\x4c\xac\x4b\xa2\x3e\xda\xf2\xde\xb5\x62\x73\x3d\xfa\x90\xcb\x7d\x20\x1a\x0b\x33\xf4\x9e\x9f\xd0\x8a\x6b\x85\xc6\xec\xec\x2e\xcf\xfa\xd0\x35\xc6\xc7\x28\x2a\xb2\xf5\x5a\xbe\x55\x74\xd7\xdd\x67\x10\x8d\xb2\x85\xa4\x0f\xa7\x6d\x7c\xe6\xc0\xdd\xce\x60\x1a\x47\x07\x5e\x3e\x83\xf6\x38\xc9\x7d\x29\x17\x13\xce\xd6\xe2\xc2\xd2\x04\x0f\x58\x55\x4b\x65\x88\x30\xcf\xdd\x39\x48\x87\x93\xb9\xcf\x60\xae\x27\x06\x88\x28\x4a\xa9\xa2\xec\x3f\xff\x76\x4b\x59\xf9\x2c\x1b\x5a\x5c\x80\xd4\x90\xbc\xfb\xc2\xb0\xbd\x7d\x10\xc7\xe7\x67\xed\x17\x90\x2a\x6b\x2f\xec\x65\x99\xfd\xea\xe1\xd3\xdf\x3c\x79\x9e\x26\xa6\x0c\x47\xdf\xb6\xa6\xa6\xa3\x7f\x23\xbc\xc1\xe9\xe0\xa5\x8d\x9f\xa2\x28\x82\x27\x69\xe2\x8d\xd8\xed\xbf\xf7\xc0\x8d\x59\x1d\xbb\x12\xbb\xfd\x5f\xa7\xe3\x25\xe8\xe1\x2d\x57\xd0\xec\xcd\xed\x56\x6d\x92\x1a\x7a\x3a\xd4\x95\x7e\xa7\x1a\xfc\x02\x30\x7f\x11\xb6\x2a\x4e\x71\x1c\x21\x21\x11\xfe\xda\xb1\x81\x44\xdb\x92\x74\x12\x19\xad\xee\x17\xe1\xc2\x21\x7d\x2e\x15\x1e\xe5\x58\x26\x7c\x4a\x0c\x1b\x65\x9f\x49\x47\xdb\x9c\xdf\xce\xf7\xa6\x4f\x02\x9a\xd2\x60\x41\x0e\x49\xde\x37\xd4\x61\x97\x7e\xef\x50\xe7\x4f\x06\x4e\x08\x35\x00\x9a\x0b\xf5\x04\x90\x53\x59\x68\x1b\xdb\x13\x69\x98\xec\xd2\x3f\x23\x04\x8b\xf4\xf9\x44\x38\x94\xc3\x4c\x9c\x41\x5f\xa4\xd2\x64\x58\xa2\xfb\xaa\x73\xa0\xb8\x0c\xdd\xf4\xc1\xfa\x62\x55\x82\xa6\xbb\xbf\x9c\xed\xc9\x8f\x2a\x22\xbe\x24\xfa\x5f\x12\x04\xa7\xf7\xb3\xd6\xb5\x6c\x54\x81\xb6\x74\xb9\x8b\xb0\x76\x75\x8f\x8e\x2d\x5e\xfd\xb1\xcd\xe4\xac\xe3\x5e\x5b\xf7\xec\x3e\xd2\x7b\x47\x49\xb3\x76\xe7\xdb\xf6\xd8\x1a\xe8\x01\xdf\x60\x2d\xe1\xf6\x36\xc9\xb9\xcc\x7d\xd3\x3e\x12\xd8\xf3\xef\x4b\xa2\x4e\xe2\xe8\xcf\x68\x86\x5e\xa7\xef\x71\x46\xe7\xf2\xd3\x53\xff\x95\x94\x06\xd5\x70\xf0\x3f\x65\xa2\xfb\x5a\xbc\x75\x7a\xf2\x8b\x82\x6c\xf2\x13\x83\xb6\xa3\xbd\xeb\x8b\x80\x60\xa4\xfd\xce\x29\x97\x74\x97\x9d\xa7\x89\xfb\x3d\xd5\xd0\xdd\xff\x37\x00\x00\xff\xff\xd2\xe1\x06\x6b\x7c\x25\x00\x00")

func wwwTemplatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlIdHtml,
		"www/templates/html/id.html",
	)
}

func wwwTemplatesHtmlIdHtml() (*asset, error) {
	bytes, err := wwwTemplatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/id.html", size: 9596, mode: os.FileMode(420), modTime: time.Unix(1576372544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwTemplatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x0c\xbe\x70\x59\x13\x71\x03\x11\x57\x42\x65\x2b\x38\x2d\x87\xae\x80\xe3\x24\x9e\x36\xa3\x75\xc6\xc6\x9e\xb4\x8d\xaa\xfd\xef\x28\xad\x8a\x52\x89\x1e\xc8\x25\x9e\xa7\x79\x1f\x1a\xbd\xd3\x09\x3c\x6d\x59\x08\x0c\x8b\xa7\xa3\x81\xd7\xd7\x45\xfd\xe6\xcb\xd3\x6a\xf3\xeb\xfb\x23\x74\xda\x87\xe5\xa2\x9e\x7e\x10\x50\x76\xce\x90\x98\xe5\x02\xa0\xee\x08\xfd\xf4\x98\xbe\x5a\x59\x03\x2d\x7f\x74\xf1\x6d\x81\x27\x81\x35\xe7\xa2\x75\x75\x41\xaf\x3b\x3d\x29\x42\xa7\x9a\x2c\xfd\x1e\x78\xef\xcc\x2a\x8a\x92\xa8\xdd\x8c\x89\x0c\xb4\x97\xc9\x19\xa5\xa3\x56\x93\xe1\x27\x68\x3b\xcc\x85\xd4\x3d\x6f\xd6\xf6\x83\xb9\x55\x12\xec\xc9\x99\x4c\x5b\xca\x99\xf2\x8c\x1f\x33\xef\x58\xcc\x7d\xdf\x9f\xf6\xf9\xb3\x5d\xc5\x3e\xa1\x72\x13\xe6\xd6\xdf\x1e\xdd\x47\x03\xd5\xbf\x8c\x30\xa5\x40\xb6\x8f\x0d\x07\xb2\x07\x6a\x2c\xa6\x64\x5b\x4c\x78\xab\x30\x52\xf9\x1f\x81\xa2\xa8\x43\xb1\x0d\x66\x5b\x74\xbc\x51\x6a\x02\xb6\x2f\x77\xb4\xbe\xa2\xf8\x8e\x82\x5f\x67\x26\xf1\x61\x9c\x5f\x2f\x0f\x74\x87\xb5\x67\x3a\xa4\x98\x75\xb6\x7d\x60\xaf\x9d\xf3\xb4\xe7\x96\xec\x79\x78\x00\x16\x56\xc6\x60\x4b\x8b\x81\xdc\xfb\x07\xe8\xf1\xc8\xfd\xd0\xcf\x00\x96\x5b\x60\x28\x94\xcf\xd3\x74\x0d\x27\x71\x16\x60\xaa\x4a\x75\xed\x4a\xdd\x44\x3f\xfe\x8d\x96\x96\x9b\x8e\x0b\x24\xdc\x11\x04\xda\x2a\xf0\x39\x15\x47\xc1\x10\x46\x68\x02\xca\xcb\xbb\xba\x4a\x67\x66\x75\xa1\xd6\xd5\xa5\x91\xa7\x13\x90\xf8\xa9\xab\x7f\x02\x00\x00\xff\xff\x6d\xbc\x23\x2b\xc1\x02\x00\x00")

func wwwTemplatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlIndexHtml,
		"www/templates/html/index.html",
	)
}

func wwwTemplatesHtmlIndexHtml() (*asset, error) {
	bytes, err := wwwTemplatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/index.html", size: 705, mode: os.FileMode(420), modTime: time.Unix(1576365693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/templates/html/id.html": wwwTemplatesHtmlIdHtml,
	"www/templates/html/index.html": wwwTemplatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"html": &bintree{nil, map[string]*bintree{
				"id.html": &bintree{wwwTemplatesHtmlIdHtml, map[string]*bintree{}},
				"index.html": &bintree{wwwTemplatesHtmlIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

