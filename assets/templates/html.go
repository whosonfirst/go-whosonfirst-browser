// Code generated by go-bindata.
// sources:
// www/templates/html/id.html
// www/templates/html/inc_footer.html
// www/templates/html/inc_header.html
// www/templates/html/inc_meta_common.html
// www/templates/html/inc_meta_common.html~
// www/templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwTemplatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xef\x8e\xdb\xb8\x11\xff\xec\x7d\x8a\x89\x12\x34\x5f\xce\x56\x72\xb9\xf6\xc3\x9e\xac\x16\x4d\xee\x80\x45\xef\x7a\x41\x92\xf6\xd0\x4f\x01\x2d\x8e\x25\x26\x14\xa9\x92\xd4\x7a\xdd\xed\xbe\x56\x1f\xa0\x4f\x56\x50\x14\x25\x4a\x96\x12\xff\x49\x73\x01\x02\xcb\xe4\xcc\x6f\x66\x7e\x1c\x72\x86\xf2\xde\xdf\x03\xc5\x2d\x13\x08\x11\xa3\x11\x3c\x3c\x5c\x25\x8f\x5e\xfd\xf2\xf2\xdd\x3f\x5e\xff\x00\x85\x29\x79\x7a\x95\xd8\x0f\xe0\x44\xe4\xeb\x08\x45\x94\x5e\x01\x24\x05\x12\x6a\x1f\xec\xbf\xc4\x30\xc3\x31\xbd\xbf\x87\xd5\xdb\xd7\x6f\x56\x7f\x25\x25\xc2\xc3\x03\xfc\x1b\xfc\xc8\x0d\x75\xdf\x7f\x2d\xe4\x53\x0d\xbf\x08\xf8\x91\x29\x6d\x92\xd8\xe9\xb5\x28\xf7\xf7\x60\xb0\xac\x38\x31\xd6\x13\x91\xbd\x2f\xd1\x90\xf7\x99\x2c\x4b\x29\x1a\xb7\x5a\x63\x76\x18\x2a\x25\x2b\x54\x66\xbf\x8e\xac\x6f\xd7\x9c\x68\x53\x4a\xca\xb6\x0c\x69\x04\x99\x14\x06\x85\x59\x47\xd6\xfe\x4f\x44\x9b\x9f\xdb\x29\x78\x78\x88\x20\x4e\xaf\x16\x00\x33\x68\x32\xbf\x36\xfb\x0a\x03\x0c\xa2\x0c\xcb\x38\x36\x7a\xb3\x3a\x9a\x19\x7c\x2f\x48\x19\x2a\x0e\x83\xfd\xb4\x7e\x43\xc4\xc8\xf1\x90\x4a\xa6\x81\x74\x6c\xbe\xe6\x24\x43\xeb\x65\x33\x23\xba\xf1\x97\xb2\x16\x46\xed\xdb\x18\x67\x6d\x51\xd4\x99\x62\x95\x61\x96\xd6\xce\xe2\x8d\xd1\xa3\xe5\x81\x9b\x57\xd6\xee\x60\x0d\x3f\x8d\xcc\x4a\x92\x87\x51\xc4\x95\xc8\xe3\x81\xfe\x1f\x35\xfb\x17\xae\xef\x74\x19\x00\xcd\xe0\x99\x1d\x33\x06\xd5\x75\x46\x14\x8d\xe0\x96\xf0\x1a\xd7\x91\xae\xcb\x92\xa8\xfd\x27\xdc\xf0\x6a\x76\x45\x02\x57\xfe\x44\x38\x97\x5b\x53\x60\x65\xc9\xd3\x47\x00\x64\x0a\x89\x91\xea\x22\x8c\x5a\xf1\x90\x0e\x46\xe3\x63\xd9\xf4\x08\x5f\x2d\x31\xbc\xc1\xff\x53\x76\x78\xf8\xcb\x52\xc4\xb9\x06\x5a\x65\xeb\x28\xfe\x40\x6e\x89\x1b\x88\xb9\xcc\x08\xdf\x4a\x45\x72\x5c\x95\x4c\xac\x3e\xe8\x28\x4d\x62\x37\x99\x2e\x3e\xaf\xaf\x39\xab\xaa\x7d\x49\xaa\x55\xa6\xa4\xd6\x05\x61\x4a\x0f\x41\x8e\x74\x64\x57\x48\x2d\xc5\xd6\x12\xb4\xda\xed\x76\x63\x47\x4e\x51\x57\x28\x28\xaa\x49\x2f\x8e\xd2\x6f\xb9\x67\x78\x79\x24\x19\xc9\x0a\xbc\x24\x96\x5a\xb1\xf3\x03\x11\x68\x2e\x50\x26\x25\xdb\xee\x87\xfa\xb0\x80\xce\xfd\x53\xb0\x72\x94\x1f\xb4\x3c\xc8\xae\x53\x20\x38\x92\x2d\x47\xb3\xaa\x0d\xe3\xd3\xeb\x72\x12\x8c\x36\x7b\x3e\xb3\xbe\x27\xe1\x14\x44\x50\x8e\xe3\x9c\x9f\xe2\x89\x33\xf1\x11\x14\xf2\x75\xe4\x6c\x17\x88\x26\x82\x42\xe1\x76\x1d\xc5\x99\xd6\x07\x3b\x20\xd3\x3a\x4a\xcf\xd2\x76\x95\xdf\x01\x2c\xce\x73\x40\x1b\x62\x58\xb6\x62\x74\xe0\xc6\x29\x0c\x6d\x94\xdc\x69\x54\xab\x92\x54\xfa\x92\x85\xf7\x38\x8c\x9e\xbf\x5a\x01\x06\x13\xcc\xcc\xb8\x63\x9b\xb3\xd8\x77\x67\xc9\x46\xd2\x3d\x50\x62\xc8\x32\x40\x5a\xd6\x8a\x2d\x51\xd0\x4a\x32\x5f\x53\x5e\x11\x43\x7e\x68\x47\xec\x49\x9e\x5e\xcd\x75\x65\x16\x1a\x55\xd3\x90\x75\x67\x3d\x61\x62\xd0\x54\x51\x76\x0b\x19\x27\x5a\xaf\xa3\xc0\x6c\x04\x8c\x0e\x06\x96\x4d\x21\x8d\x0e\xfd\xb3\x72\xa3\xca\x72\x20\x53\x11\x53\xf4\x52\xaf\x89\x29\xe6\xe4\x14\x8a\x21\xe4\xeb\x66\x28\x04\xe6\xc4\x30\x53\x53\xec\x65\x7e\x6a\x47\x02\x19\x29\xf2\xb1\x90\x1f\xea\xa5\x4a\x26\x26\xd0\x7e\x66\xc2\x03\x0e\x25\x0f\x31\xad\xe8\x04\x2c\xb9\x9b\x82\x25\x77\x87\xb0\x56\x72\x02\x96\xdc\x0d\x60\xbb\x05\x6e\x16\xcb\xb2\x53\x92\x2a\x4a\xaf\x16\xc9\xa3\xe5\x12\x12\x56\xe6\x6d\x32\x8e\x9b\x96\x95\xbe\xcd\x23\x28\x90\xe5\x85\x59\x47\x2f\x7e\xff\xcc\xd6\x69\x58\x2e\xbb\x54\x8e\x29\xbb\x1d\x6f\xb5\xe2\x5b\x8b\xac\x2b\x22\x26\xf2\x62\xd9\x34\xce\x4d\x02\x8d\xda\x9b\x24\xb6\x2a\x29\x38\xcd\xc9\xec\x59\x52\x62\xd0\x6d\x84\x46\xb4\x69\x88\x66\x2d\x55\xbe\x43\x8a\xd2\xa9\xa6\xa9\x03\x11\x43\x88\x5e\xba\x6b\xa5\x6c\xb6\x2f\x5a\xf9\xd5\x95\x0d\xae\x24\x9c\xfb\x20\xd8\x16\xf0\x9f\x2d\x69\xfa\x65\xad\x6c\xbe\xad\xde\x1a\xc5\x44\xfe\x23\x27\x39\x44\xcf\x9b\x0d\xb4\x80\x79\x57\xed\xd9\x55\xeb\x65\xe6\x94\xa3\xf4\x57\x84\x0d\x72\x86\xb7\x08\xa6\x60\x1a\x14\x66\x52\x51\x30\x12\x36\x08\xad\xd4\xaa\x75\xa8\xf5\x02\xb9\xc6\xcf\xbb\xf2\xec\x58\x57\x84\x34\x03\x77\x84\x04\x9b\x68\xa8\xce\x73\xcc\x19\xb5\xdf\x84\xcd\x2b\x4f\x68\x43\xe3\xa2\x4b\x26\x9b\x39\xed\x97\x45\x97\xaa\xa1\x73\x14\x0d\x61\x5c\x47\x93\xd4\xbf\xc2\x4a\x61\x46\x0c\xd2\xf3\xd8\xa7\x9d\x7e\x94\xbe\x0b\x82\x2b\x88\x86\x0d\xa2\x80\x92\xa8\x8f\x48\x81\x68\xe8\x45\xc7\xc1\x36\xe1\x5d\x2d\xa6\xfc\x7b\x5b\x57\xa8\x34\xd2\x39\xff\xec\xff\x49\xbb\xba\x53\x84\xcd\x1e\x4c\x81\xb0\x95\x9c\xcb\x1d\x13\x79\x2b\xab\xaf\xad\x32\x40\x52\xf3\xc9\x9d\x60\x4f\x7a\x54\x2d\x6f\xed\x49\xaf\x88\xc8\x11\x9e\xb0\x6f\xe0\x89\x86\xeb\xb5\xf3\xb2\xf7\xf1\xcf\xfb\xd6\xad\xb6\x12\xa7\x09\xf1\x95\xd7\x9d\x12\x4f\x74\x73\x62\x4d\x98\x63\x14\x46\x3b\x9e\x6d\xf7\xf3\x27\xbf\x03\x4a\xfd\x53\x12\x93\x34\x89\x39\x0b\x7d\xf5\xb4\xba\x34\xa9\x79\x3b\xb7\x72\x1f\x43\xee\x2d\xf9\x73\xd4\x33\x91\x4f\x71\xef\x60\x42\xee\x3b\xca\xf5\x27\xf8\x3e\x8a\xed\xcf\x32\xad\x7d\x7a\xfe\x56\x1c\x0f\xf8\xed\xd8\x5d\xb9\x94\x0c\x26\xdb\xc3\xbe\xdb\xae\x35\x3f\xd8\x9f\x1b\xa2\x59\xd6\x04\x6e\xa3\x99\xbd\x48\xce\xee\x44\x46\xfb\xd3\xb7\x29\x40\xfe\x90\x26\x82\x02\x33\x76\x79\x6c\x61\xbc\x45\xf8\xdb\x9b\x9b\x06\xc9\x13\x56\x18\x53\xe9\xeb\x38\xb6\x04\xac\xc2\x46\x4a\xaa\xfe\xce\xd9\x35\x0e\x13\xa6\x15\x72\xdb\x65\x04\xb5\xc2\x09\x5b\xaa\x56\x8e\xab\x71\x5e\x75\xad\x45\xb4\xfc\xce\x25\x92\x8d\x3a\x48\xa3\xa7\x1a\x5c\x47\xe2\xe3\xce\x24\xc5\x74\xf9\x5d\x12\x37\x0f\xb0\x2b\x58\x56\x00\x13\x94\xd9\xb3\x44\x03\x33\xcd\xa6\xef\x82\x7a\x5c\x30\x54\x44\x65\xc5\x3e\x4a\xcb\x9a\x1b\x56\x71\x6c\x11\xb5\xf5\x0b\x36\x98\x91\x5a\xe3\x21\x0d\x39\x33\x45\xbd\xb1\x6d\x75\xd8\x55\xc6\x83\x34\xed\xee\x8c\xb1\x51\x88\x71\x49\xb4\x41\x15\x07\xc3\x3b\xb9\x7d\xec\xac\xbd\xb7\x0b\xd3\x78\x57\x55\x28\x34\x68\x59\xa2\x61\x25\xea\x80\x9d\xc5\x44\x11\x0a\x18\x7a\x71\x0a\x43\x2f\x86\x0c\x95\x48\x44\xc3\x4e\x69\x1b\x11\xe0\x98\x33\xc3\x4a\x62\x90\xef\xa1\x20\xb7\x78\x06\x63\x15\x4a\x3b\xf5\x55\x88\x23\x2a\xaf\x11\xc8\x46\xd6\xc6\x55\x4d\x2d\x95\x01\xb9\xb5\x5f\x44\x7e\x3c\x85\xdf\x9e\x42\xe1\xf3\x29\x0a\x77\xd8\xf0\x25\x9e\x1a\xd8\x48\x53\xa0\x42\x0a\x46\xed\xed\xc1\x66\x24\x54\x4c\x00\x95\x3b\x11\x96\xf6\xa7\x33\xe9\xc8\xca\x12\x29\xb3\x17\x05\x67\xfc\xeb\xa7\x23\x67\x5b\xb4\xf1\x66\xb2\xac\x78\xb3\x81\x68\x70\xac\x7d\x9a\xc9\xe7\x9f\x67\xf2\xe6\x90\x49\xcb\xa1\xa5\x6a\x87\x40\xd4\x57\x8a\xb2\x16\x19\x2a\x43\x98\x68\x08\x76\x6b\xd9\xd6\xa8\x36\xad\xdd\x6a\x49\x81\xe3\x24\xf2\x11\xde\x18\x4b\x93\x93\x76\x2d\xc4\xb8\xcc\x0c\xe8\xf9\x32\x05\x67\x0c\x99\x1e\x16\x82\x43\xa9\xf1\x56\xe8\x9a\x29\x5f\x4d\x36\xb2\x16\xb6\x88\xc3\x46\xde\x0d\x8e\xff\xc7\x93\x3e\xe7\x68\xcf\x29\xb5\x87\xa9\xc1\xa5\x07\xdb\xc8\xbb\xfe\xd4\x1f\x5c\xde\xbe\x81\x99\x8b\x5a\x30\x11\xde\xca\x86\xc3\x81\x7c\xb3\x78\xbe\x86\x55\x8a\x89\x8c\x55\x84\x43\x86\xc2\x28\xc9\xe8\xc5\xa1\x78\xa0\x3e\x8e\xe0\x4a\xdb\x7b\x35\x76\xc9\xd7\x35\xdf\x7f\xdb\xd2\x1f\xdc\x14\x6d\xc5\xeb\xda\x70\x8e\x5b\xb3\xd4\x05\x51\x1f\x6d\x79\x6f\x5b\xb1\xa9\x1e\xbd\xcf\xe5\x2e\x10\x8d\x99\xe9\x7b\xcf\xcf\x68\x2d\x2b\x85\xc6\xec\xed\x2d\xcf\xfa\xd0\x36\xc6\xc7\x28\x2a\xb2\xf3\x5a\xbe\x55\x74\xcf\xed\x67\x10\x8d\xb2\x85\xa4\x0b\xa7\x69\x7c\xa6\xc0\xdd\xcd\x60\x1c\x47\x0b\x5e\xbc\x80\xe6\xb5\xd4\x3a\x32\x78\x67\x96\x84\xb3\x5c\x5c\x5b\x9a\xe0\x11\x2b\x2b\xa9\x0c\x11\xe6\x7b\xf7\x1e\xa4\xc5\x49\xdd\x67\xb0\xd6\x23\x03\x44\x64\x85\x54\x51\xfa\xdf\xff\xb8\xa3\xac\x78\x91\xf6\x2d\x2e\x40\x62\xc8\x86\x63\x4f\xe4\xa3\xe5\xf2\x6a\x61\x7d\x37\x2a\x6d\x1e\xec\x63\x91\xfe\xee\xf1\xf3\x3f\x3c\xfb\x3e\x89\x4d\x11\x8e\xbe\x6d\x4c\x8d\x47\xff\x4e\x78\x8d\xe3\xc1\x97\x36\x7e\x8a\x22\x0b\x66\x92\xd8\x1b\xb1\xd7\x7f\xef\x81\x1b\xb3\x3a\xf6\x24\x76\xf7\xbf\x56\xc7\x4b\xd0\xf9\x2b\x57\xd0\xec\x4d\xdd\x56\x6d\x92\x1a\x7a\x3e\xd4\x8d\x7e\xa7\x6a\xfc\x02\x30\x7f\x11\xb6\x2a\x8e\x71\x1c\x21\x21\x11\xfe\xd9\xb1\x81\x44\xdb\x92\x74\x16\x19\x8d\xee\x17\xe1\xc2\x21\x5d\x4a\x85\x47\x39\x96\x09\x9f\x12\xfd\x45\xd9\x67\xd2\xd1\x36\xa7\xaf\xf3\x9d\xe9\xb3\x80\xc6\x34\x58\x90\x39\xc9\x53\x43\xed\x6f\xe9\x27\x87\x3a\xfd\x66\xe0\x8c\x50\x03\xa0\xa9\x50\xcf\x00\x39\x97\x85\xa6\xb1\x3d\x93\x86\xd1\x2d\xfd\x82\x10\x2c\xd2\xe5\x44\x38\x94\x79\x26\x16\xd0\x15\xa9\x24\xee\x8f\xe8\xae\xea\xcc\x14\x97\xbe\x9b\x9e\xad\x2f\x56\x25\x68\xba\xbb\xc7\xc9\x9e\xfc\xa8\x22\xe2\x4b\x62\xeb\x71\xf8\xf6\x7e\xd2\xba\x96\xb5\xca\xd0\x96\x2e\xf7\x10\xd6\xae\x76\xea\xd8\xe2\xd5\xbd\xb6\x19\xbd\xeb\x38\xe9\xea\x9e\x9e\x22\x7d\xf0\x2a\x69\xd2\xee\x74\xdb\xbe\xb4\x06\x3a\xc0\x37\x58\x49\x78\x78\x88\x37\x5c\x6e\x7c\xd3\x3e\x10\x38\xf0\xef\x4b\xa2\x8e\xe2\xe8\xde\xd1\xf4\xbd\x4e\xd7\xe3\xcc\xbd\x97\xf7\xc9\xe8\xe7\xdd\xcf\x38\x73\xbf\xfb\x6c\xa5\x34\xed\xef\x3e\xe0\x7f\x66\xda\x48\xba\x4f\xaf\x92\xd8\xfd\x99\x50\xdf\x9e\xff\x2f\x00\x00\xff\xff\xba\xa3\x3a\x53\x53\x24\x00\x00")

func wwwTemplatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlIdHtml,
		"www/templates/html/id.html",
	)
}

func wwwTemplatesHtmlIdHtml() (*asset, error) {
	bytes, err := wwwTemplatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/id.html", size: 9299, mode: os.FileMode(420), modTime: time.Unix(1576393481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwTemplatesHtmlInc_footerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xc8\xb1\x0e\x02\x21\x0c\x00\xd0\xbd\x5f\x51\xd9\x91\xdd\x70\x8d\x7f\x62\xc8\xb5\x84\x26\x08\x17\xae\x39\x07\xc2\xbf\xbb\xb8\xb8\xbe\x39\x59\xb2\x36\x41\xa7\x6d\x7f\xe5\xde\x4d\x86\x5b\x0b\x20\xb2\x5e\xa8\xbc\xb9\x9f\x11\x20\x22\xc6\x9b\xf7\x18\x13\x96\x21\x79\x73\xc5\xec\x38\x1f\x21\xd8\x47\xcd\x64\xdc\xf7\xfe\x0e\xa9\xd6\x9e\xad\xc8\x51\xd3\x2e\xa7\xa3\xe7\x3f\xc4\x90\x08\xbd\x27\x88\x81\xf5\x22\x80\x39\xa5\xf1\x5a\xf0\x0d\x00\x00\xff\xff\xca\x91\xea\x84\x89\x00\x00\x00")

func wwwTemplatesHtmlInc_footerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlInc_footerHtml,
		"www/templates/html/inc_footer.html",
	)
}

func wwwTemplatesHtmlInc_footerHtml() (*asset, error) {
	bytes, err := wwwTemplatesHtmlInc_footerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/inc_footer.html", size: 137, mode: os.FileMode(420), modTime: time.Unix(1576393560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwTemplatesHtmlInc_headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\xbf\x6a\xe4\x30\x10\x87\x6b\xeb\x29\x86\xb9\xe2\x2a\x23\xb8\xd2\xb6\x54\xdd\x1f\x0e\x0e\xae\x09\xa4\x0c\xb2\x34\x5e\x8b\x95\x47\x8e\x2c\x6f\x76\x31\x7e\x84\x74\xe9\xf3\x8a\x79\x84\xb0\x76\xb2\x45\xba\x5f\xf1\xc1\x27\x7d\xb3\x2c\x8e\x3a\xcf\x04\xe8\xd9\x3e\xf4\x64\x1c\x25\x5c\x57\xd1\xec\x13\xbc\x53\xe8\x28\x1b\x1f\xa6\x72\x20\x9e\x51\x0b\x00\x80\x86\xcd\x49\x8b\x42\x14\xd7\xb1\x41\x13\x99\x64\xfb\x92\xcd\xc9\x97\xc9\x1f\xfa\x8c\x5a\x14\x1b\xda\xc5\x34\xc0\x40\xb9\x8f\x4e\xe1\x9f\x5f\x77\x08\xc6\x66\x1f\x59\xa1\xf4\x4e\x22\x4c\xf9\x12\x48\xa1\xe7\xe0\x99\xca\x36\x44\x7b\x44\x5d\x88\xa2\x68\xda\x39\xe7\xc8\x90\x2f\x23\x29\x9c\xe6\x76\xf0\xf9\x86\xb7\xc6\x1e\x0f\x29\xce\xec\x4a\x1b\x43\x4c\xd5\xb7\xae\xeb\xea\x36\x26\x47\xa9\x02\x8e\x4c\xf5\x60\xce\xe5\x93\x77\xb9\xaf\x7e\x24\x1a\x6a\xe7\xa7\x31\x98\x4b\xb5\x8b\x6a\xd4\x6f\xaf\x2f\xcf\x8d\xdc\x25\xfa\xea\xf3\x3c\xce\xf9\x43\x97\xe9\x9c\x11\x4e\x26\xcc\xa4\x10\xb7\x2f\x3e\x22\xb0\x19\x68\x1b\x63\x30\x96\xfa\x18\x1c\x25\x85\xff\x62\x3c\xce\x23\x18\xb8\xef\xe3\xf7\x09\xfe\x33\xfc\xf6\x69\xca\xf0\xf7\xe7\xed\xb9\x5f\xe5\xf2\xb3\x8e\xbc\xe6\xd1\xa2\x68\xe4\x2d\x69\x9b\xc0\x06\x32\x49\xa1\x09\x01\x41\x6a\xb1\x37\x97\xfb\x4d\xb4\x58\x16\x20\x76\xb0\xae\xe2\x3d\x00\x00\xff\xff\xd8\x12\x90\x5b\xbf\x01\x00\x00")

func wwwTemplatesHtmlInc_headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlInc_headerHtml,
		"www/templates/html/inc_header.html",
	)
}

func wwwTemplatesHtmlInc_headerHtml() (*asset, error) {
	bytes, err := wwwTemplatesHtmlInc_headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/inc_header.html", size: 447, mode: os.FileMode(420), modTime: time.Unix(1576393215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwTemplatesHtmlInc_meta_commonHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4f\x4b\x03\x31\x10\xc5\xcf\xee\xa7\x08\x39\x37\x14\x6f\x8a\x46\x90\x62\xd1\x7b\x0b\xde\xca\x6c\x32\x75\x07\xf3\xcf\x64\xb6\xed\xb2\xec\x77\x97\xd6\x83\x59\xec\xc1\xe3\x7b\xcc\xef\xfd\x60\xc6\xd1\xe2\x9e\x02\x0a\x49\xc1\xec\x3c\x32\xec\x4c\xf4\x3e\x06\x39\x4d\x4d\x73\x23\xc4\xe3\xb9\x13\x1d\x73\x52\xf8\xd5\xd3\x41\xcb\x55\x0c\x8c\x81\xd5\x66\x48\x28\x85\xf9\x49\x5a\x32\x9e\x78\xd9\xb1\x77\x0f\xc2\x74\x90\x0b\xb2\xde\x6e\xd6\xea\x4e\x3e\xfd\xce\x04\xf0\xa8\x65\xc6\x3d\xe6\x8c\xb9\x82\x63\xa6\x0f\x0a\xf5\x69\x6d\x7c\x57\xdb\x67\xb5\x8a\x3e\x01\x53\xeb\x6a\xe9\xdb\x8b\xbe\x97\x62\xf9\x47\x01\x29\x39\x54\x3e\xb6\xe4\x50\x1d\xb1\x55\x90\x92\x32\x90\x60\x8e\x0f\x58\xfe\x4d\x17\x06\xee\x8b\x6a\x21\xab\xc2\xc3\x6c\xa6\x75\x60\x3e\xaf\x0d\xbd\x42\xb0\x1d\x3a\xbb\xce\x84\xc1\xba\xa1\x7e\x57\xee\xf1\x1a\x72\x20\x3c\xa6\x98\xb9\x3a\x3d\x92\xe5\x4e\x5b\x3c\x90\x41\x75\x09\x0b\x41\x81\x98\xc0\xa9\x62\xc0\xa1\xbe\x5d\x08\x0f\x27\xf2\xbd\xaf\x0a\x0a\xf3\xa2\x2f\x98\x2f\xe9\xfc\x04\x1d\xe2\xc5\xde\x8c\xa3\xc0\x60\xc5\x34\x35\xdf\x01\x00\x00\xff\xff\x95\x61\x58\x88\x0b\x02\x00\x00")

func wwwTemplatesHtmlInc_meta_commonHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlInc_meta_commonHtml,
		"www/templates/html/inc_meta_common.html",
	)
}

func wwwTemplatesHtmlInc_meta_commonHtml() (*asset, error) {
	bytes, err := wwwTemplatesHtmlInc_meta_commonHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/inc_meta_common.html", size: 523, mode: os.FileMode(420), modTime: time.Unix(1576393575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwTemplatesHtmlInc_meta_commonHtml2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x6b\x2b\x31\x10\x84\xeb\xe7\x5f\x21\x54\x5b\x98\xd7\xbd\x47\xa2\x40\x30\x31\x49\x6f\x43\x3a\xb3\x27\xad\x73\x4b\xa4\x95\x22\xed\xd9\x3e\x0e\xff\xf7\x60\xa7\x88\x4c\x5c\xa4\x9c\x61\x67\x3e\x98\x9d\x26\xe5\x71\x47\x8c\x4a\x13\xbb\x6d\x44\x81\xad\x4b\x31\x26\xd6\xea\x74\x9a\xcd\xfe\x28\x75\x7f\x36\x55\x2f\x92\x0d\x7e\x0c\xb4\xb7\x7a\x99\x58\x90\xc5\xac\xc7\x8c\x5a\xb9\x2f\x65\xb5\xe0\x51\x16\xbd\xc4\x70\xa7\x5c\x0f\xa5\xa2\xd8\xcd\x7a\x65\xfe\xe9\x87\xef\x1a\x86\x88\x56\x17\xdc\x61\x29\x58\x9a\x70\x2a\xf4\x46\xdc\x9e\xb6\xc4\x57\xb3\x79\x34\xcb\x14\x33\x08\x75\xa1\x85\xbe\x3c\xd9\xff\x5a\x2d\x7e\x20\x20\xe7\x80\x26\xa6\x8e\x02\x9a\x03\x76\x06\x72\x36\x0e\x32\x5c\xc7\x47\xac\xbf\x4e\x57\x01\x19\xaa\xe9\xa0\x98\x2a\xe3\x55\x4d\x17\xc0\xbd\xdf\x2a\x7a\x06\xf6\x3d\x06\xbf\x2a\x84\xec\xc3\xd8\xce\x55\x06\xbc\x15\xd9\x13\x1e\x72\x2a\xd2\x9c\x1e\xc8\x4b\x6f\x3d\xee\xc9\xa1\xb9\x88\xb9\x22\x26\x21\x08\xa6\x3a\x08\x68\xff\xce\x55\x84\x23\xc5\x21\x36\x06\xf1\xb5\x31\x54\x2c\x17\x75\x1e\xc1\x72\xba\xd0\x67\xd3\xa4\x90\xfd\xf9\xdb\x9f\x01\x00\x00\xff\xff\x02\x86\xa2\xc4\x0d\x02\x00\x00")

func wwwTemplatesHtmlInc_meta_commonHtml2Bytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlInc_meta_commonHtml2,
		"www/templates/html/inc_meta_common.html~",
	)
}

func wwwTemplatesHtmlInc_meta_commonHtml2() (*asset, error) {
	bytes, err := wwwTemplatesHtmlInc_meta_commonHtml2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/inc_meta_common.html~", size: 525, mode: os.FileMode(420), modTime: time.Unix(1576393363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwTemplatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x41\x8f\xd3\x3c\x10\xbd\xe7\x57\xcc\xe7\xcb\x77\x59\x2b\xe2\x06\x22\xae\x84\xca\x56\x70\x5a\x0e\x5d\x01\x27\x34\x89\x67\x37\x23\x6c\xc7\xd8\x93\xb6\x51\xd4\xff\x8e\xdc\xb0\xab\x54\xa2\x07\x72\xc9\xbc\xc9\xbc\xf7\x46\x93\x37\xcf\x60\xe9\x89\x03\x81\xe2\x60\xe9\xa4\xe0\x7c\xae\x9a\xff\x3e\x3e\x6c\xf7\xdf\xbf\xdc\x43\x2f\xde\x6d\xaa\xa6\xbc\xc0\x61\x78\x36\x8a\x82\xda\x54\x00\x4d\x4f\x68\x4b\x51\x9e\x46\x58\x1c\x6d\xbe\xf6\xc3\xff\x19\x1e\x02\xec\x38\x65\x69\xea\xa5\xfb\x32\xe3\x49\x10\x7a\x91\xa8\xe9\xd7\xc8\x07\xa3\xb6\x43\x10\x0a\xa2\xf7\x53\x24\x05\xdd\x82\x8c\x12\x3a\x49\x5d\x0c\xdf\x43\xd7\x63\xca\x24\xe6\x71\xbf\xd3\x6f\xd5\xb5\x52\x40\x4f\x46\x25\x7a\xa2\x94\x28\xad\xf8\x43\xe2\x67\x0e\xea\xb6\xef\x37\xfd\xf8\x41\x6f\x07\x1f\x51\xb8\x75\x6b\xeb\xcf\xf7\xe6\x9d\x82\xfa\x6f\x46\x18\xa3\x23\xed\x87\x96\x1d\xe9\x23\xb5\x1a\x63\xd4\x1d\x46\xbc\x56\x98\x28\xff\x8b\x40\x16\x94\x31\xeb\x16\x93\xce\x32\x5d\x29\xb5\x0e\xbb\x9f\x37\xb4\x3e\x61\xb0\x3d\x39\xbb\x4b\x4c\xc1\xba\x69\x7d\xbd\x34\xd2\x0d\xd6\x81\xe9\x18\x87\x24\xab\xe9\x23\x5b\xe9\x8d\xa5\x03\x77\xa4\x2f\xe0\x0e\x38\xb0\x30\x3a\x9d\x3b\x74\x64\xde\xdc\x81\xc7\x13\xfb\xd1\xaf\x1a\x1c\xae\x1b\x63\xa6\x74\x41\xe5\x1a\x26\x0c\xab\x05\x4a\x54\xea\x97\xac\x34\xed\x60\xa7\x4d\xf5\xe7\xd3\x3c\x83\x90\x8f\x0e\xe5\x12\xbe\xee\x47\x19\x2b\xbf\xf2\x7c\xae\x5e\xd7\x47\x0e\xaf\x84\xa6\x5e\x60\xa9\x16\xa5\xa6\x5e\x02\x3a\xcf\x40\xc1\x16\xe2\xef\x00\x00\x00\xff\xff\xfb\x77\x88\x51\xd0\x02\x00\x00")

func wwwTemplatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlIndexHtml,
		"www/templates/html/index.html",
	)
}

func wwwTemplatesHtmlIndexHtml() (*asset, error) {
	bytes, err := wwwTemplatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/index.html", size: 720, mode: os.FileMode(420), modTime: time.Unix(1576393104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/templates/html/id.html": wwwTemplatesHtmlIdHtml,
	"www/templates/html/inc_footer.html": wwwTemplatesHtmlInc_footerHtml,
	"www/templates/html/inc_header.html": wwwTemplatesHtmlInc_headerHtml,
	"www/templates/html/inc_meta_common.html": wwwTemplatesHtmlInc_meta_commonHtml,
	"www/templates/html/inc_meta_common.html~": wwwTemplatesHtmlInc_meta_commonHtml2,
	"www/templates/html/index.html": wwwTemplatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"html": &bintree{nil, map[string]*bintree{
				"id.html": &bintree{wwwTemplatesHtmlIdHtml, map[string]*bintree{}},
				"inc_footer.html": &bintree{wwwTemplatesHtmlInc_footerHtml, map[string]*bintree{}},
				"inc_header.html": &bintree{wwwTemplatesHtmlInc_headerHtml, map[string]*bintree{}},
				"inc_meta_common.html": &bintree{wwwTemplatesHtmlInc_meta_commonHtml, map[string]*bintree{}},
				"inc_meta_common.html~": &bintree{wwwTemplatesHtmlInc_meta_commonHtml2, map[string]*bintree{}},
				"index.html": &bintree{wwwTemplatesHtmlIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

