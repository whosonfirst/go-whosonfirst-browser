// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xff\x8e\xdb\xb8\xf1\xff\x7b\xf7\x29\x26\x4a\xf0\x4d\x0e\x88\xac\xe4\x72\xdf\xa2\xdd\xd8\x42\xdb\x4d\x82\x2e\x9a\xeb\x05\xf9\xd1\x6b\xff\x3a\xd0\xe2\x58\x62\x42\x91\x3a\x92\xb2\xd7\x4d\xf7\xb5\xfa\x00\x7d\xb2\x82\xa4\x7e\x50\xb2\x9c\xb5\xbd\x69\x1a\x20\x6b\x89\x9a\xf9\xcc\xcc\x47\x43\xce\x90\xf6\xfc\xde\x8b\x9f\x2e\xdf\xff\xfd\xcd\x4b\x28\x4c\xc9\xd3\xf3\xb9\xfd\x00\x4e\x44\xbe\x88\x50\x44\xe9\x39\xc0\xbc\x40\x42\xd3\xf3\x33\x80\xb9\x61\x86\x63\xfa\xf9\x33\xcc\xde\xbd\x79\x3b\xfb\x0b\x29\x11\x6e\x6e\xe0\x9f\xd0\x8e\x5c\x51\x7f\xff\x73\x21\x1f\x6a\xf8\x49\xc0\x2b\xa6\xb4\x99\x27\x5e\xcf\x41\x94\x68\x08\x14\xc6\x54\x31\xfe\x5a\xb3\xf5\x22\xba\x94\xc2\xa0\x30\xf1\xfb\x6d\x85\x11\x64\xfe\x6e\x11\x19\xbc\x36\x89\x75\xe6\x39\x64\x05\x51\x1a\xcd\xe2\xc3\xfb\x57\xf1\x6f\xa3\x00\x46\x90\x12\x17\x91\xc2\x15\x2a\x85\x2a\x50\x96\x8a\xe5\x4c\x44\x7b\x2c\xfe\x2d\xfe\xf0\x87\xf8\x52\x96\x15\x31\x6c\xc9\x43\xa3\x57\x2f\x17\xbf\x8b\x20\xd9\x31\x41\xaa\x8a\x63\x5c\xca\x25\xe3\x18\x6f\x70\x19\x93\xaa\x8a\x33\x52\x91\xa1\xfa\x16\xf5\xc1\xda\xda\x10\x53\xeb\x78\x49\x54\xac\xcd\x76\x00\xb3\xe4\x24\xfb\x34\x05\xf4\x27\x22\x68\x81\x9c\xbe\x52\x0c\x05\xe5\xdb\x90\x2e\x55\xe3\x94\xca\x9a\xe1\xa6\x92\xca\x04\xa2\x1b\x46\x4d\xb1\xa0\xb8\x66\x19\xc6\xee\xe6\x31\x30\xc1\x0c\x23\x3c\xd6\x19\xe1\xb8\x78\xfa\x18\x4a\x72\xcd\xca\xba\x0c\x06\x98\x18\x0e\xd4\x1a\x95\xbb\xb3\x24\x2c\x84\x74\xd6\x7b\xf3\x95\x92\x15\x2a\xb3\x5d\x44\xf6\x25\x5e\x70\xa2\x4d\x29\x29\x5b\x31\xa4\x81\x2f\x36\x71\x5e\x13\x6d\x7e\x6c\x1e\xc1\xcd\x4d\x1b\xc5\x14\x94\xcc\x2f\xcc\x30\x4d\x88\x32\x2c\xe3\xa3\xd0\x07\x0a\x9a\x19\xfc\xc5\x92\x11\x68\x0d\xf3\xf3\x0b\xca\x2e\x71\x47\xfe\x86\xa9\xcf\x34\x90\x2e\xfb\xdf\x70\x92\xa1\xf5\xcf\x3d\x11\xdd\xf8\xa5\xac\x85\x51\xdb\x3e\xb4\x09\x43\x14\x75\xa6\x58\x65\x98\x14\x61\x3e\x1a\x3d\x9a\x4b\x70\xf5\xc2\x1a\x1d\x4c\xb8\x0e\xf6\x5e\x1c\x4f\x61\xb3\x92\xe4\x61\x10\x09\xa3\xc9\x00\x60\xa6\xd7\xb9\x05\x81\x38\x9e\x7e\x85\x66\xc3\x8c\x41\x75\x91\x11\x45\x23\x58\x13\x5e\xe3\x22\xd2\x75\x59\x12\xb5\xdd\x17\x54\xab\x63\xf9\x0f\x8c\xff\x9e\x70\x2e\x57\xa6\xc0\xca\xb2\xa5\x6f\xd3\xce\x14\x12\x23\xd5\xe9\x00\xb5\xe2\x5f\x0a\xfd\x36\xf5\x6f\x93\x00\xad\xb5\xff\x5a\x16\xb4\x06\x8e\x4c\x05\xb0\x78\x9c\x89\x4f\xa0\x90\x2f\x22\xb7\x50\xe9\x02\xd1\x44\x50\x28\x5c\x2d\xa2\x24\xd3\x3a\x29\x49\xf5\x0f\x14\xb3\x8f\x7a\x96\x69\xdd\x2c\xba\x3e\x0e\xd0\x2a\x5b\x44\xc9\x47\xb2\x26\x7e\xa0\x95\x2d\x99\x95\x8f\xd2\x79\xe2\xc7\x5d\xda\xed\x55\xe2\x32\x23\x7c\x25\x15\xc9\x71\x57\xd3\x2f\x15\x7b\x75\x35\x67\x55\xb5\x2d\x49\x35\xcb\x94\xd4\xba\x20\x4c\xe9\x23\x4c\x6f\x0a\xa9\xa5\x58\x59\xd2\x67\x9b\xcd\x66\x6c\xfa\x50\x55\x85\x82\xa2\x1a\xd9\x3d\x50\xb7\x79\x8b\x0c\xc7\x7e\x1f\x6e\x3e\x23\x59\x81\xa7\xfa\x5e\x2b\x76\x9a\xe3\x02\xcd\x89\x8a\xa4\x64\xab\xed\x50\x17\xce\xe0\x0c\x0e\x7e\x55\x39\xca\x8f\x5a\xee\x64\xca\xa1\xea\x1c\xc9\x8a\xa3\x99\xd5\x86\xf1\x5d\xd6\x8f\x82\xf0\x73\xe6\x6e\x18\x05\x11\x94\xe3\x38\x6f\x3b\x46\xec\x34\xbd\x7d\x96\x8e\x33\xd9\xcf\xd5\xa3\x55\x33\x59\x96\x52\x78\x6d\x47\xe8\xf9\xb1\x08\xb6\xf3\x61\xd9\x8c\xd1\x6e\xb9\x38\x88\x8c\x5e\x6d\xef\xec\xb5\x4b\x6f\xd3\x39\xf6\x20\x7e\x41\x82\x0d\x13\x54\x6e\x66\x84\xd2\x97\x6b\x14\xe6\x35\xd3\x06\x05\xaa\x47\x11\x97\x84\x46\x8f\x61\x55\x8b\xcc\xae\xbb\x60\xef\x1f\xa1\x95\xf9\xee\xb3\xd3\x3c\x9b\xf6\xc2\xb6\x4c\x8f\xbe\x7b\xee\x44\x6e\xdc\x67\xef\x13\xc0\x3c\xf1\x5d\x33\xc0\x7c\x29\xe9\xd6\x5e\x00\xb8\x3f\x73\xca\xd6\x90\x71\xa2\xf5\x22\x0a\x90\x23\x60\x74\x30\x10\xbb\xfa\x16\x01\x25\x86\xc4\xe1\xb8\x95\x1b\xad\xfc\x3b\x32\x15\x31\x45\x2f\xf5\x86\x98\x62\x9f\x9c\xb2\xbd\x77\x08\xf9\xc6\x0d\x85\xc0\x9c\x18\x66\x6a\x8a\xbd\xcc\xeb\x66\x24\x90\x91\x22\x1f\x0b\xb5\x43\xbd\x54\xc9\xc4\x04\xda\x8f\x4c\xb4\x80\x43\xc9\x5d\x4c\x2b\x3a\x01\x4b\xae\xa7\x60\xc9\xf5\x2e\xac\x95\x9c\x80\x25\xd7\x03\x58\x5b\xfa\xa0\x7b\x59\x96\x9d\x92\x54\x36\x91\x7c\x71\x65\x65\xde\xe4\xea\x74\xf9\x2c\x90\xe5\x85\x59\x44\xcf\xfe\xff\x49\x57\x4b\x1b\xbc\x84\xb2\x75\x7b\xd3\x8e\x15\xdf\x5b\x64\x5d\x11\x31\x91\x17\xb1\x6b\x5d\x5d\x0e\x8f\x7a\x8f\x79\x62\x55\x52\xf0\x9a\x93\xd9\x13\x53\x62\xd0\xcf\x16\x27\xea\xba\x95\xbd\x96\xaa\xb6\x7d\x89\xd2\xa9\x8e\xa6\x03\x11\x43\x88\x5e\xba\xeb\x73\x5c\x4d\x6e\xe4\x67\xe7\x36\xb8\x92\x70\xde\x06\xc1\x56\x80\xbf\x36\xa4\xe9\xcb\x5a\xd9\x7c\x9b\xbd\x33\x8a\x89\xfc\x15\x27\x39\x44\x4f\x23\xb8\xb9\xf1\x6d\xc4\x1e\x57\x9b\xdd\x53\xe6\x95\xa3\xf4\x67\x84\x25\x72\x86\x6b\x04\x53\x30\x0d\x0a\x33\xa9\x28\x18\x09\x4b\x84\x46\x6a\xd6\x38\xd4\x78\x81\x5c\xe3\xed\xae\x3c\x39\xd4\x15\x21\xcd\xc0\x1d\x21\xc1\x26\x1a\xaa\xd3\x1c\xf3\x46\xed\x9d\xb0\x79\xd5\x12\xea\x68\x3c\xeb\x92\xc9\x66\x4e\x73\x73\xd6\xa5\x6a\xe8\x1c\x45\x43\x18\xd7\xd1\x24\xf5\x2f\xb0\x52\x98\x11\x83\xf4\x34\xf6\x69\xa7\x1f\xa5\xef\x83\xe0\x0a\xa2\x61\x89\x28\xa0\x24\xea\x13\x52\x20\x1a\x7a\xd1\x71\xb0\x2e\xbc\xf3\xb3\x29\xff\xde\xd5\x15\x2a\x8d\x74\x9f\x7f\xf6\xff\xa4\x5d\xdd\x29\xc2\x72\x0b\xa6\x40\x58\x49\xce\xe5\x86\x89\xbc\x91\xd5\x17\x6e\xdd\x86\x79\xcd\x27\x67\x82\x64\xc2\xa0\x6a\x78\xb3\xff\x3e\x7f\x06\x45\x44\x8e\xf0\x80\x3d\x86\x07\x1a\x2e\x16\xde\xcb\xde\xc7\x3f\x6e\x1b\xb7\x1c\x2e\x67\xe9\x9c\xb4\x15\xd0\xaf\x12\x0f\xb4\x5b\xb1\x26\xcc\x31\x0a\xa3\x19\xcf\x56\xdb\xfd\x2b\xbf\x07\x4a\xdb\xab\x79\x42\xd2\x79\xc2\x59\xe8\x6b\x4b\xab\x4f\x93\x9a\x37\xcf\x66\xfe\x63\xc8\xbd\x25\x7f\x1f\xf5\x4c\xe4\x53\xdc\x7b\x98\x90\xfb\x8e\x72\xfd\x05\xbe\x0f\x62\xfb\x56\xa6\x75\x9b\x9e\xff\x2b\x8e\x07\xfc\x76\xec\xce\x7c\x4a\x06\x0f\x9b\xc5\xbe\x9b\xae\x35\xdf\x99\x9f\x4b\xa2\x59\xe6\x02\xb7\xd1\xec\xdd\xe8\xed\x9d\x89\x8c\xf6\xab\xaf\x2b\x40\xed\x22\x4d\x04\x05\x66\xec\xeb\xb1\x85\x71\x8d\xf0\xe1\xed\x95\x43\x6a\x09\x2b\x8c\xa9\xf4\x45\x92\x58\x02\x66\x61\x87\x23\x55\x9e\xec\x34\x0e\x13\xa6\x15\x72\xdb\x65\x04\xb5\xc2\x0b\x5b\xaa\x66\x9e\xab\x71\x5e\x75\xad\x45\x14\xff\xe0\x13\xc9\x46\x1d\xa4\xd1\x43\x0d\xbe\x23\x69\xe3\xce\x24\xc5\x34\xfe\x61\x9e\xb8\x0b\xd8\x14\x2c\x2b\x80\x09\xca\xec\x5a\xa2\x81\x19\x37\xe9\xbb\xa0\xee\x17\x0c\x15\x51\x59\xb1\x8d\xd2\xb2\xe6\x86\x55\x1c\x1b\x44\x6d\xfd\x82\x25\x66\xa4\xd6\xb8\x4b\x43\xce\x4c\x51\x2f\x6d\x77\x1b\x36\x9d\xc9\x20\x4d\xbb\x7d\x58\x62\x14\x62\x52\x12\x6d\x50\x25\xc1\xf0\x46\xae\xee\x7b\x6b\xbf\xd8\x17\xe3\xbc\xab\x2a\x14\x1a\xb4\x2c\xd1\xb0\x12\x75\xc0\xce\xd9\x44\x11\x0a\x18\x7a\x76\x0c\x43\xcf\x86\x0c\x95\x48\x84\x63\xa7\xb4\x8d\x08\x70\xcc\x99\x61\x25\x31\xc8\xb7\x50\x90\x35\x9e\xc0\x58\x85\xd2\x3e\xfa\x26\xc4\x11\x95\xd7\x08\x64\x29\x6b\xe3\xab\xa6\x96\xca\x80\x5c\xd9\x1b\x91\x1f\x4e\xe1\xf7\xc7\x50\xf8\x74\x8a\xc2\x0d\x3a\xbe\xc4\x43\x03\x4b\x69\x0a\x54\x48\xc1\xa8\xad\x5d\xd8\x8c\x84\x8a\x09\xa0\x72\x23\xc2\xd2\xfe\x70\x4f\x3a\xb2\xb2\x44\xca\x88\x69\xd9\xfd\xf6\xe9\xc8\xd9\x0a\x6d\xbc\x99\x2c\x2b\xee\x26\x10\x0d\x96\xb5\x2f\x33\xf9\xf4\x76\x26\xaf\x76\x99\xb4\x1c\x5a\xaa\x36\x08\x44\x7d\xa3\x28\x6b\x91\xa1\x32\x84\x09\x47\xb0\x7f\x97\x4d\x8d\x6a\xd2\xda\xbf\x2d\x29\x70\x9c\x44\x6d\x84\x57\xc6\xd2\xe4\xa5\x7d\x0b\x31\x2e\x33\x03\x7a\xbe\x4e\xc1\x19\x43\xa6\xbb\x85\x60\x57\x6a\x3c\x15\xba\x66\xaa\xad\x26\x4b\x59\x0b\x5b\xc4\x61\x29\xaf\x07\xcb\xff\xfd\x49\x9f\x73\xb4\xeb\x94\xda\xc2\xd4\x60\xdc\x82\x2d\xe5\x75\xbf\xea\x0f\x36\x6f\x8f\x61\xcf\x46\x2d\x78\x10\xee\xca\x86\xc3\x81\xbc\x7b\x79\x6d\x0d\xab\x14\x13\x19\xab\x08\x87\x0c\x85\x51\x92\xd1\x3b\x87\xd2\x02\xf5\x71\x04\x5b\xda\xde\xab\xb1\x4b\x6d\x5d\x6b\xfb\x6f\x5b\xfa\x83\x9d\xa2\xad\x78\x5d\x1b\xce\x71\x65\x62\x5d\x10\xf5\xc9\x96\xf7\xa6\x15\x9b\xea\xd1\xfb\x5c\xee\x02\xd1\x98\x99\xbe\xf7\xbc\x45\x2b\xae\x14\x1a\xb3\xb5\xbb\x3c\xeb\x43\xd3\x18\x1f\xa2\xa8\xc8\xa6\xd5\x6a\x5b\x45\x7f\xdd\x7c\x06\xd1\x28\x5b\x48\xba\x70\x5c\xe3\x33\x05\xee\x77\x06\xe3\x38\x1a\xf0\xe2\x19\xb8\xe3\x21\x7f\x44\x13\x13\xce\x72\x71\x61\x69\x82\x7b\xac\xac\xa4\x32\x44\x98\xe7\xfe\x1c\xa4\xc1\x49\xfd\x67\xf0\xae\x47\x06\x88\xc8\x0a\xa9\xa2\xf4\xdf\xff\xf2\x4b\x59\xf1\x2c\xed\x5b\x5c\x80\xb9\x21\xcb\xe6\x8b\x47\x77\x7b\x2f\x8e\xcf\xcf\xdc\x17\x99\x2a\x75\x17\xf6\xb2\x48\xff\xef\xfe\xd3\xdf\x3c\x79\x3e\x4f\x4c\x11\x8e\xbe\x73\xa6\xc6\xa3\x7f\x25\xbc\xc6\xf1\xe0\xa5\x8d\x9f\xa2\xc8\x82\x27\xf3\xa4\x35\x62\xb7\xff\xad\x07\x7e\xcc\xea\xd8\x95\xd8\xef\xff\x1a\x9d\x56\x82\xee\xdf\x72\x05\xcd\xde\xd4\x6e\xd5\x26\xa9\xa1\xa7\x43\x5d\xe9\xf7\xaa\xc6\xaf\x00\xf3\x67\x61\xab\xe2\x18\xc7\x13\x12\x12\xd1\x5e\x7b\x36\x90\x68\x5b\x92\x4e\x22\xc3\xe9\x7e\x15\x2e\x3c\xd2\x5d\xa9\x68\x51\x0e\x65\xa2\x4d\x89\x7e\xa3\xdc\x66\xd2\xc1\x36\xa7\xb7\xf3\x9d\xe9\x93\x80\xc6\x34\x58\x90\x7d\x92\xc7\x86\xda\xef\xd2\x8f\x0e\x75\xfa\x64\xe0\x84\x50\x03\xa0\xa9\x50\x4f\x00\x39\x95\x05\xd7\xd8\x9e\x48\xc3\x68\x97\x7e\x87\x10\x2c\xd2\xdd\x89\xf0\x28\xfb\x99\x38\x83\xae\x48\xcd\x93\x7e\x89\xee\xaa\xce\x9e\xe2\xd2\x77\xd3\x7b\xeb\x8b\x55\x09\x9a\xee\xee\x72\xb2\x27\x3f\xa8\x88\xb4\x25\xb1\xfd\x45\x42\x70\x7a\x3f\x69\x5d\xcb\x5a\x65\x68\x4b\x97\xbf\x08\x6b\x57\xf3\xe8\xd0\xe2\xd5\x1d\xdb\x8c\xce\x3a\x8e\xda\xba\xa7\xc7\x48\xef\x1c\x25\x4d\xda\x9d\x6e\xdb\x63\x6b\xa0\x03\x7c\x8b\x95\x84\x9b\x9b\x64\xc9\xe5\xb2\x6d\xda\x07\x02\x3b\xfe\x7d\x4d\xd4\x51\x1c\xdd\x19\x4d\xdf\xeb\x74\x3d\xce\xe0\x5c\x7e\x7c\xea\xbf\x92\xd2\xa0\xea\x0f\xfe\xc7\x4c\x34\x5f\xab\x3b\xa7\x47\x3f\x4b\x48\x47\xbf\x53\x70\x1d\xed\x97\xbe\x08\x08\x46\xdc\xf7\x47\xfe\x6b\xa3\x79\xe2\x7f\x97\xf5\x9f\x00\x00\x00\xff\xff\x4e\x74\x82\x2d\xa8\x25\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 9640, mode: os.FileMode(420), modTime: time.Unix(1524158856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

