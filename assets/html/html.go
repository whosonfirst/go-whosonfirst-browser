// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xff\x8e\xdb\xb8\xf1\xff\x7b\xf7\x29\x26\xca\xe1\x9b\x3b\x20\xb2\x92\xcb\x7d\x8b\x76\x63\x0b\x6d\x37\x09\xba\x68\xae\x17\xe4\x47\xaf\xfd\xeb\x40\x89\x63\x89\x09\x45\xea\x48\xca\x5e\x37\xdd\xd7\xea\x03\xf4\xc9\x0a\x92\xfa\x41\xc9\x72\xd6\xeb\xa4\x69\x80\xac\x25\x6a\xe6\x33\x33\x1f\x0d\x39\x43\xda\xcb\x7b\xcf\x7e\xba\x7c\xfb\xf7\x57\xcf\xa1\x34\x15\x4f\xcf\x97\xf6\x03\x38\x11\xc5\x2a\x42\x11\xa5\xe7\x00\xcb\x12\x09\x4d\xcf\xcf\x00\x96\x86\x19\x8e\xe9\xc7\x8f\xb0\x78\xf3\xea\xf5\xe2\x2f\xa4\x42\xb8\xb9\x81\x7f\x42\x37\x72\x45\xfd\xfd\xcf\xa5\x7c\xa0\xe1\x27\x01\x2f\x98\xd2\x66\x99\x78\x3d\x07\x51\xa1\x21\x50\x1a\x53\xc7\xf8\x6b\xc3\x36\xab\xe8\x52\x0a\x83\xc2\xc4\x6f\x77\x35\x46\x90\xfb\xbb\x55\x64\xf0\xda\x24\xd6\x99\xa7\x90\x97\x44\x69\x34\xab\x77\x6f\x5f\xc4\xbf\x8d\x02\x18\x41\x2a\x5c\x45\x0a\xd7\xa8\x14\xaa\x40\x59\x2a\x56\x30\x11\x1d\xb0\xf8\xb7\xf8\xdd\x1f\xe2\x4b\x59\xd5\xc4\xb0\x8c\x87\x46\xaf\x9e\xaf\x7e\x17\x41\xb2\x67\x82\xd4\x35\xc7\xb8\x92\x19\xe3\x18\x6f\x31\x8b\x49\x5d\xc7\x39\xa9\xc9\x58\x7d\x87\xfa\x68\x6d\x6d\x88\x69\x74\x9c\x11\x15\x6b\xb3\x1b\xc1\x64\x9c\xe4\x1f\xe6\x80\xfe\x44\x04\x2d\x91\xd3\x17\x8a\xa1\xa0\x7c\x17\xd2\xa5\x1a\x9c\x53\xd9\x30\xdc\xd6\x52\x99\x40\x74\xcb\xa8\x29\x57\x14\x37\x2c\xc7\xd8\xdd\x3c\x04\x26\x98\x61\x84\xc7\x3a\x27\x1c\x57\x8f\x1f\x42\x45\xae\x59\xd5\x54\xc1\x00\x13\xe3\x81\x46\xa3\x72\x77\x96\x84\x95\x90\xce\xfa\x60\xbe\x56\xb2\x46\x65\x76\xab\xc8\xbe\xc4\x0b\x4e\xb4\xa9\x24\x65\x6b\x86\x34\xf0\xc5\x26\xce\x4b\xa2\xcd\x8f\xed\x23\xb8\xb9\xe9\xa2\x98\x83\x92\xc5\x85\x19\xa7\x09\x51\x86\xe5\x7c\x12\xfa\x48\x41\x33\x83\xbf\x58\x32\x02\xad\x71\x7e\x7e\x42\xd9\x25\xee\xc4\xdf\x30\xf5\x99\x06\xd2\x67\xff\x2b\x4e\x72\xb4\xfe\xb9\x27\xa2\x1f\xbf\x94\x8d\x30\x6a\x37\x84\x36\x63\x88\xa2\xce\x15\xab\x0d\x93\x22\xcc\x47\xa3\x27\x73\x09\xae\x9e\x59\xa3\xa3\x09\xd7\xc3\xde\x8b\xe3\x39\x6c\x56\x91\x22\x0c\x22\x61\x34\x19\x01\x2c\xf4\xa6\xb0\x20\x10\xc7\xf3\xaf\xd0\x6c\x99\x31\xa8\x2e\x72\xa2\x68\x04\x1b\xc2\x1b\x5c\x45\xba\xa9\x2a\xa2\x76\x87\x82\xea\x74\x2c\xff\x81\xf1\xdf\x13\xce\xe5\xda\x94\x58\x5b\xb6\xf4\x6d\xda\xb9\x42\x62\xa4\x3a\x1d\xa0\x51\xfc\x53\xa1\xdf\xa6\xfe\x75\x12\xa0\xb3\xf6\x5f\xcb\x82\xce\xc0\x1d\x53\x01\x2c\x1e\x67\xe2\x03\x28\xe4\xab\xc8\x2d\x54\xba\x44\x34\x11\x94\x0a\xd7\xab\x28\xc9\xb5\x4e\x2a\x52\xff\x03\xc5\xe2\xbd\x5e\xe4\x5a\xb7\x8b\xae\x8f\x03\xb4\xca\x57\x51\xf2\x9e\x6c\x88\x1f\xe8\x64\x2b\x66\xe5\xa3\x74\x99\xf8\x71\x97\x76\x07\x95\xb8\xcc\x09\x5f\x4b\x45\x0a\xdc\xd7\xf4\x4b\xc5\x41\x5d\xcd\x59\x5d\xef\x2a\x52\x2f\x72\x25\xb5\x2e\x09\x53\xfa\x0e\xa6\xb7\xa5\xd4\x52\xac\x2d\xe9\x8b\xed\x76\x3b\x35\x7d\xac\xaa\x42\x41\x51\x4d\xec\x1e\xa9\xdb\xbe\x45\x86\x53\xbf\x8f\x37\x9f\x93\xbc\xc4\x53\x7d\x6f\x14\x3b\xcd\x71\x81\xe6\x44\x45\x52\xb1\xf5\x6e\xac\x0b\x67\x70\x06\x47\xbf\xaa\x02\xe5\x7b\x2d\xf7\x32\xe5\x58\x75\x8e\x64\xcd\xd1\x2c\x1a\xc3\xf8\x3e\xeb\x77\x82\xf0\x73\xe6\xf3\x30\x4a\x22\x28\xc7\x69\xde\xf6\x8c\xd8\x69\x7a\xfb\x2c\x9d\x66\xb2\x9f\xab\x77\x56\xcd\x65\x55\x49\xe1\xb5\x1d\xa1\xe7\x77\x45\xb0\x9d\x0f\xcb\x17\x8c\xf6\xcb\xc5\x51\x64\x0c\x6a\x07\x67\xaf\x5d\x7a\xdb\xce\x71\x00\xf1\x0b\x12\x6c\x99\xa0\x72\xbb\x20\x94\x3e\xdf\xa0\x30\x2f\x99\x36\x28\x50\x7d\x1b\x71\x49\x68\xf4\x10\xd6\x8d\xc8\xed\xba\x0b\xf6\xfe\x5b\xb4\x32\xdf\x7d\x74\x9a\x67\xf3\x5e\xd8\x96\xe9\xdb\xef\x9e\x3a\x91\x1b\xf7\x39\xf8\x04\xb0\x4c\x7c\xd7\x0c\xb0\xcc\x24\xdd\x01\x25\x86\xc4\x01\x50\xdc\x28\x16\xa3\xa0\xb5\x64\x5d\x59\x79\x46\x0c\x79\xde\x8e\xd8\xf5\xdc\x2a\x03\xb8\x3f\x4b\xca\x36\x90\x73\xa2\xf5\x2a\x0a\x40\x22\x60\x74\x34\x10\xbb\x9a\x18\xed\x5b\xb3\x72\x93\x6a\xb1\x27\x53\x13\x53\x0e\x52\xaf\x88\x29\x0f\xc9\x29\xdb\xaf\x87\x90\xaf\xdc\x50\x08\xcc\x89\x61\xa6\xa1\x38\xc8\xbc\x6c\x47\x02\x19\x29\x8a\xa9\x50\x37\x34\x48\x55\x4c\xcc\xa0\xfd\xc8\x44\x07\x38\x96\xdc\xc7\xb4\xa2\x33\xb0\xe4\x7a\x0e\x96\x5c\xef\xc3\x5a\xc9\x19\x58\x72\x3d\x82\xb5\xe5\x12\xfa\x97\x65\xd9\xa9\x48\x6d\x93\xcf\x17\x64\x56\x15\x6d\x7e\xcf\x97\xdc\x12\x59\x51\x9a\x55\xf4\xe4\xff\x1f\xf5\xf5\xb7\xc5\x4b\x28\xdb\x74\x37\xdd\x58\xf9\xbd\x45\xd6\x35\x11\x33\x79\x11\xbb\x76\xd7\xe5\xfd\xa4\x5f\x59\x26\x56\x25\x05\xaf\x39\x9b\x3d\x31\x25\x06\xfd\x0c\x73\xa2\xae\xc3\x39\x68\xa9\xee\x5a\x9e\x28\x9d\xeb\x82\x7a\x10\x31\x86\x18\xa4\xfb\xde\xc8\xd5\xf1\x56\x7e\x71\x6e\x83\xab\x08\xe7\x5d\x10\x6c\x0d\xf8\x6b\x4b\x9a\xbe\x6c\x94\xcd\xb7\xc5\x1b\xa3\x98\x28\x5e\x70\x52\x40\xf4\x38\x82\x9b\x1b\xdf\x7a\x1c\x70\xb5\xdd\x71\xe5\x5e\x39\x4a\x7f\x46\xc8\x90\x33\xdc\x20\x98\x92\x69\x50\x98\x4b\x45\xc1\x48\xc8\x10\x5a\xa9\x45\xeb\x50\xeb\x05\x72\x8d\xb7\xbb\xf2\xe8\x58\x57\x84\x34\x23\x77\x84\x04\x9b\x68\xa8\x4e\x73\xcc\x1b\xb5\x77\xc2\xe6\x55\x47\xa8\xa3\xf1\xac\x4f\x26\x9b\x39\xed\xcd\x59\x9f\xaa\xa1\x73\x14\x0d\x61\x5c\x47\xb3\xd4\x3f\xc3\x5a\x61\x4e\x0c\xd2\xd3\xd8\xa7\xbd\x7e\x94\xbe\x0d\x82\x2b\x89\x86\x0c\x51\x40\x45\xd4\x07\xa4\x40\x34\x0c\xa2\xd3\x60\x5d\x78\xe7\x67\x73\xfe\xbd\x69\x6a\x54\x1a\xe9\x21\xff\xec\xff\x59\xbb\xba\x57\x84\x6c\x07\xa6\x44\x58\x4b\xce\xe5\x96\x89\xa2\x95\xd5\x17\x6e\xad\x87\x65\xc3\x67\x67\x82\x5d\xb7\x51\xb5\xbc\xd9\x7f\x1f\x3f\x82\x22\xa2\x40\xf8\x86\x3d\x84\x6f\x34\x5c\xac\xbc\x97\x83\x8f\x7f\xdc\xb5\x6e\x39\x5c\xce\xd2\x25\xe9\xaa\xa6\x5f\x25\xbe\xd1\x6e\xc5\x9a\x31\xc7\x28\x4c\x66\x3c\x5b\xef\x0e\xaf\xfc\x1e\x28\xed\xae\x96\x09\x49\x97\x09\x67\xa1\xaf\x1d\xad\x3e\x4d\x1a\xde\x3e\x5b\xf8\x8f\x31\xf7\x96\xfc\x43\xd4\x33\x51\xcc\x71\xef\x61\x42\xee\x7b\xca\xf5\x27\xf8\x3e\x8a\xed\x5b\x99\xd6\x5d\x7a\xfe\xaf\x38\x1e\xf1\xdb\xb3\xbb\xf0\x29\x19\x3c\x6c\x17\xfb\x7e\xba\x36\x7c\x6f\x7e\x66\x44\xb3\xdc\x05\x6e\xa3\x39\xb8\x39\x3c\x38\x13\x19\x1d\x56\x5f\x57\x80\xba\x45\x9a\x08\x0a\xcc\xd8\xd7\x63\x0b\xe3\x06\xe1\xdd\xeb\x2b\x87\xd4\x11\x56\x1a\x53\xeb\x8b\x24\xb1\x04\x2c\xc2\xae\x48\xaa\x22\xd9\x6b\x1c\x66\x4c\x2b\xe4\xb6\xcb\x08\x6a\x85\x17\xb6\x54\x2d\x3c\x57\xd3\xbc\xea\x5b\x8b\x28\xfe\xc1\x27\x92\x8d\x3a\x48\xa3\x07\x1a\x7c\x47\xd2\xc5\x9d\x4b\x8a\x69\xfc\xc3\x32\x71\x17\xb0\x2d\x59\x5e\x02\x13\x94\xd9\xb5\x44\x03\x33\x6e\xd2\xf7\x41\xdd\x2f\x19\x2a\xa2\xf2\x72\x17\xa5\x55\xc3\x0d\xab\x39\xb6\x88\xda\xfa\x05\x19\xe6\xa4\xd1\xb8\x4f\x43\xc1\x4c\xd9\x64\xb6\x23\x0e\x1b\xd5\x64\x94\xa6\xfd\xde\x2d\x31\x0a\x31\xa9\x88\x36\xa8\x92\x60\x78\x2b\xd7\xf7\xbd\xb5\x5f\xec\x8b\x71\xde\xd5\x35\x0a\x0d\x5a\x56\x68\x58\x85\x3a\x60\xe7\x6c\xa6\x08\x05\x0c\x3d\xb9\x0b\x43\x4f\xc6\x0c\x55\x48\x84\x63\xa7\xb2\x8d\x08\x70\x2c\x98\x61\x15\x31\xc8\x77\x50\x92\x0d\x9e\xc0\x58\x8d\xd2\x3e\xfa\x2a\xc4\x11\x55\x34\x08\x24\x93\x8d\xf1\x55\x53\x4b\x65\x40\xae\xed\x8d\x28\x8e\xa7\xf0\xfb\xbb\x50\xf8\x78\x8e\xc2\x2d\x3a\xbe\xc4\x03\x03\x99\x34\x25\x2a\xa4\x60\xd4\xce\x2e\x6c\x46\x42\xcd\x04\x50\xb9\x15\x61\x69\x7f\x70\x20\x1d\x59\x55\x21\x65\xc4\x74\xec\x7e\xfd\x74\xe4\x6c\x8d\x36\xde\x5c\x56\x35\x77\x13\x88\x06\xcb\xda\xa7\x99\x7c\x7c\x3b\x93\x57\xfb\x4c\x5a\x0e\x2d\x55\x5b\x04\xa2\xbe\x52\x94\x8d\xc8\x51\x19\xc2\x84\x23\xd8\xbf\xcb\xb6\x46\xb5\x69\xed\xdf\x96\x14\x38\x4d\xa2\x2e\xc2\x2b\x63\x69\xf2\xd2\xbe\x85\x98\x96\x99\x11\x3d\x5f\xa6\xe0\x4c\x21\xd3\xfd\x42\xb0\x2f\x35\x9d\x0a\x7d\x33\xd5\x55\x93\x4c\x36\xc2\x16\x71\xc8\xe4\xf5\x68\xf9\xbf\x3f\xeb\x73\x81\x76\x9d\x52\x3b\x98\x1b\x8c\x3b\xb0\x4c\x5e\x0f\xab\xfe\x68\xf3\xf6\x10\x0e\x6c\xd4\x82\x07\xe1\xae\x6c\x3c\x1c\xc8\xbb\x97\xd7\xd5\xb0\x5a\x31\x91\xb3\x9a\x70\xc8\x51\x18\x25\x19\xfd\xec\x50\x3a\xa0\x21\x8e\x60\x4b\x3b\x78\x35\x75\xa9\xab\x6b\x5d\xff\x6d\x4b\x7f\xb0\x53\xb4\x15\xaf\x6f\xc3\x39\xae\x4d\xac\x4b\xa2\x3e\xd8\xf2\xde\xb6\x62\x73\x3d\xfa\x90\xcb\x7d\x20\x1a\x73\x33\xf4\x9e\xb7\x68\xc5\xb5\x42\x63\x76\x76\x97\x67\x7d\x68\x1b\xe3\x63\x14\x15\xd9\x76\x5a\x5d\xab\xe8\xaf\xdb\xcf\x20\x1a\x65\x0b\x49\x1f\x8e\x6b\x7c\xe6\xc0\xfd\xce\x60\x1a\x47\x0b\x5e\x3e\x01\x77\xa4\xe4\x8f\x75\x62\xc2\x59\x21\x2e\x2c\x4d\x70\x8f\x55\xb5\x54\x86\x08\xf3\xd4\x9f\x83\xb4\x38\xa9\xff\x0c\xde\xf5\xc4\x00\x11\x79\x29\x55\x94\xfe\xfb\x5f\x7e\x29\x2b\x9f\xa4\x43\x8b\x0b\xb0\x34\x24\x6b\xbf\xac\x74\xb7\xf7\xe2\xf8\xfc\xcc\x7d\xf9\xa9\x52\x77\x61\x2f\xcb\xf4\xff\xee\x3f\xfe\xcd\xa3\xa7\xcb\xc4\x94\xe1\xe8\x1b\x67\x6a\x3a\xfa\x57\xc2\x1b\x9c\x0e\x5e\xda\xf8\x29\x8a\x3c\x78\xb2\x4c\x3a\x23\x76\xfb\xdf\x79\xe0\xc7\xac\x8e\x5d\x89\xfd\xfe\xaf\xd5\xe9\x24\xe8\xe1\x2d\x57\xd0\xec\xcd\xed\x56\x6d\x92\x1a\x7a\x3a\xd4\x95\x7e\xab\x1a\xfc\x02\x30\x7f\x16\xb6\x2a\x4e\x71\x3c\x21\x21\x11\xdd\xb5\x67\x03\x89\xb6\x25\xe9\x24\x32\x9c\xee\x17\xe1\xc2\x23\x7d\x2e\x15\x1d\xca\xb1\x4c\x74\x29\x31\x6c\x94\xbb\x4c\x3a\xda\xe6\xfc\x76\xbe\x37\x7d\x12\xd0\x94\x06\x0b\x72\x48\xf2\xae\xa1\x0e\xbb\xf4\x3b\x87\x3a\x7f\x32\x70\x42\xa8\x01\xd0\x5c\xa8\x27\x80\x9c\xca\x82\x6b\x6c\x4f\xa4\x61\xb2\x4b\xff\x8c\x10\x2c\xd2\xe7\x13\xe1\x51\x0e\x33\x71\x06\x7d\x91\x5a\x26\xc3\x12\xdd\x57\x9d\x03\xc5\x65\xe8\xa6\x0f\xd6\x17\xab\x12\x34\xdd\xfd\xe5\x6c\x4f\x7e\x54\x11\xe9\x4a\x62\xf7\x2b\x86\xe0\xf4\x7e\xd6\xba\x96\x8d\xca\xd1\x96\x2e\x7f\x11\xd6\xae\xf6\xd1\xb1\xc5\xab\x3f\xb6\x99\x9c\x75\xdc\x69\xeb\x9e\xde\x45\x7a\xef\x28\x69\xd6\xee\x7c\xdb\x1e\x5b\x03\x3d\xe0\x6b\xac\x25\xdc\xdc\x24\x19\x97\x59\xd7\xb4\x8f\x04\xf6\xfc\xfb\x92\xa8\x93\x38\xfa\x33\x9a\xa1\xd7\xe9\x7b\x9c\xd1\xb9\xfc\xf4\xd4\x7f\x2d\xa5\x41\x35\x1c\xfc\x4f\x99\x68\xbf\x8a\x77\x4e\x4f\x7e\xca\x90\x4e\x7e\xdb\xe0\x3a\xda\x4f\x7d\x11\x10\x8c\xb8\xef\x9c\x32\x49\x77\xe9\xf9\x32\xf1\xbf\xe5\xfa\x4f\x00\x00\x00\xff\xff\x2e\xab\xfc\xd3\xdc\x25\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 9692, mode: os.FileMode(420), modTime: time.Unix(1524164821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
