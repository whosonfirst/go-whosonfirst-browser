// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xff\x8e\xdb\xb8\xf1\xff\x7b\xf7\x29\x26\xca\xe1\x9b\x3b\x20\xb2\x92\xcb\x7d\x8b\x76\x63\x0b\xbd\x6e\x12\x74\x71\x49\x6f\x91\x1f\xbd\xf6\xaf\x03\x2d\x8e\x25\x26\x14\xa9\x23\x29\x7b\xdd\x74\x5f\xab\x0f\xd0\x27\x2b\x48\xea\x07\x25\xcb\x59\xdb\x49\xd3\x00\x59\x4b\xd4\xcc\x67\x66\x3e\x1a\x72\x86\xb4\xe7\xf7\x9e\xfd\x7c\xf9\xf6\xef\xd7\xcf\xa1\x30\x25\x4f\xcf\xe7\xf6\x03\x38\x11\xf9\x22\x42\x11\xa5\xe7\x00\xf3\x02\x09\x4d\xcf\xcf\x00\xe6\x86\x19\x8e\xe9\xc7\x8f\x30\x7b\x73\xfd\x7a\xf6\x17\x52\x22\xdc\xde\xc2\x3f\xa1\x1d\xb9\xa2\xfe\xfe\x97\x42\x3e\xd0\xf0\xb3\x80\x17\x4c\x69\x33\x4f\xbc\x9e\x83\x28\xd1\x10\x28\x8c\xa9\x62\xfc\xad\x66\xeb\x45\x74\x29\x85\x41\x61\xe2\xb7\xdb\x0a\x23\xc8\xfc\xdd\x22\x32\x78\x63\x12\xeb\xcc\x53\xc8\x0a\xa2\x34\x9a\xc5\xbb\xb7\x2f\xe2\xdf\x47\x01\x8c\x20\x25\x2e\x22\x85\x2b\x54\x0a\x55\xa0\x2c\x15\xcb\x99\x88\xf6\x58\xfc\x5b\xfc\xee\xc7\xf8\x52\x96\x15\x31\x6c\xc9\x43\xa3\x57\xcf\x17\x7f\x88\x20\xd9\x31\x41\xaa\x8a\x63\x5c\xca\x25\xe3\x18\x6f\x70\x19\x93\xaa\x8a\x33\x52\x91\xa1\xfa\x16\xf5\xc1\xda\xda\x10\x53\xeb\x78\x49\x54\xac\xcd\x76\x00\xb3\xe4\x24\xfb\x30\x05\xf4\x67\x22\x68\x81\x9c\xbe\x50\x0c\x05\xe5\xdb\x90\x2e\x55\xe3\x94\xca\x9a\xe1\xa6\x92\xca\x04\xa2\x1b\x46\x4d\xb1\xa0\xb8\x66\x19\xc6\xee\xe6\x21\x30\xc1\x0c\x23\x3c\xd6\x19\xe1\xb8\x78\xfc\x10\x4a\x72\xc3\xca\xba\x0c\x06\x98\x18\x0e\xd4\x1a\x95\xbb\xb3\x24\x2c\x84\x74\xd6\x7b\xf3\x95\x92\x15\x2a\xb3\x5d\x44\xf6\x25\x5e\x70\xa2\x4d\x29\x29\x5b\x31\xa4\x81\x2f\x36\x71\x5e\x12\x6d\x5e\x35\x8f\xe0\xf6\xb6\x8d\x62\x0a\x4a\xe6\x17\x66\x98\x26\x44\x19\x96\xf1\x51\xe8\x03\x05\xcd\x0c\xfe\x6a\xc9\x08\xb4\x86\xf9\xf9\x09\x65\x97\xb8\x23\x7f\xc3\xd4\x67\x1a\x48\x97\xfd\xd7\x9c\x64\x68\xfd\x73\x4f\x44\x37\x7e\x29\x6b\x61\xd4\xb6\x0f\x6d\xc2\x10\x45\x9d\x29\x56\x19\x26\x45\x98\x8f\x46\x8f\xe6\x12\x5c\x3d\xb3\x46\x07\x13\xae\x83\xbd\x17\xc7\x53\xd8\xac\x24\x79\x18\x44\xc2\x68\x32\x00\x98\xe9\x75\x6e\x41\x20\x8e\xa7\x5f\xa1\xd9\x30\x63\x50\x5d\x64\x44\xd1\x08\xd6\x84\xd7\xb8\x88\x74\x5d\x96\x44\x6d\xf7\x05\xd5\xea\x58\xfe\x03\xe3\x7f\x24\x9c\xcb\x95\x29\xb0\xb2\x6c\xe9\xbb\xb4\x33\x85\xc4\x48\x75\x3a\x40\xad\xf8\xa7\x42\xbf\x4b\xfd\xeb\x24\x40\x6b\xed\xbf\x96\x05\xad\x81\x23\x53\x01\x2c\x1e\x67\xe2\x03\x28\xe4\x8b\xc8\x2d\x54\xba\x40\x34\x11\x14\x0a\x57\x8b\x28\xc9\xb4\x4e\x4a\x52\xfd\x03\xc5\xec\xbd\x9e\x65\x5a\x37\x8b\xae\x8f\x03\xb4\xca\x16\x51\xf2\x9e\xac\x89\x1f\x68\x65\x4b\x66\xe5\xa3\x74\x9e\xf8\x71\x97\x76\x7b\x95\xb8\xcc\x08\x5f\x49\x45\x72\xdc\xd5\xf4\x4b\xc5\x5e\x5d\xcd\x59\x55\x6d\x4b\x52\xcd\x32\x25\xb5\x2e\x08\x53\xfa\x08\xd3\x9b\x42\x6a\x29\x56\x96\xf4\xd9\x66\xb3\x19\x9b\x3e\x54\x55\xa1\xa0\xa8\x46\x76\x0f\xd4\x6d\xde\x22\xc3\xb1\xdf\x87\x9b\xcf\x48\x56\xe0\xa9\xbe\xd7\x8a\x9d\xe6\xb8\x40\x73\xa2\x22\x29\xd9\x6a\x3b\xd4\x85\x33\x38\x83\x83\x5f\x55\x8e\xf2\xbd\x96\x3b\x99\x72\xa8\x3a\x47\xb2\xe2\x68\x66\xb5\x61\x7c\x97\xf5\xa3\x20\xfc\x9c\xf9\x3c\x8c\x82\x08\xca\x71\x9c\xb7\x1d\x23\x76\x9a\xde\x3d\x4b\xc7\x99\xec\xe7\xea\xd1\xaa\x99\x2c\x4b\x29\xbc\xb6\x23\xf4\xfc\x58\x04\xdb\xf9\xb0\x6c\xc6\x68\xb7\x5c\x1c\x44\x46\xaf\xb6\x77\xf6\xda\xa5\xb7\xe9\x1c\x7b\x10\xbf\x20\xc1\x86\x09\x2a\x37\x33\x42\xe9\xf3\x35\x0a\xf3\x92\x69\x83\x02\xd5\xb7\x11\x97\x84\x46\x0f\x61\x55\x8b\xcc\xae\xbb\x60\xef\xbf\x45\x2b\xf3\xdd\x47\xa7\x79\x36\xed\x85\x6d\x99\xbe\xfd\xee\xa9\x13\xb9\x75\x9f\xbd\x4f\x00\xf3\xc4\x77\xcd\x00\xf3\xa5\xa4\x5b\xa0\xc4\x90\xd8\x2f\x7e\x31\xa9\xd8\x07\xdc\xfa\x5a\xf2\xca\x0d\xfd\x78\x7d\xf5\x13\x6e\xed\x22\x6e\x35\x00\xdc\x9f\x39\x65\x6b\xc8\x38\xd1\x7a\x11\x05\x2e\x44\xc0\xe8\x60\x20\x76\x85\x30\xf2\x26\xc2\x71\x2b\x37\x2a\x11\x3b\x32\x15\x31\x45\x2f\x75\x4d\x4c\xb1\x4f\x4e\xd9\x26\x3d\x84\xbc\x76\x43\x21\x30\x27\x86\x99\x9a\x62\x2f\xf3\xb2\x19\x09\x64\xa4\xc8\xc7\x42\xed\x50\x2f\x55\x32\x31\x81\xf6\x8a\x89\x16\x70\x28\xb9\x8b\x69\x45\x27\x60\xc9\xcd\x14\x2c\xb9\xd9\x85\xb5\x92\x13\xb0\xe4\x66\x00\x6b\x6b\x24\x74\x2f\xcb\xb2\x53\x92\xca\x66\x9c\xaf\xc2\xac\xcc\x9b\xa4\x9e\xae\xb3\x05\xb2\xbc\x30\x8b\xe8\xc9\xff\x3f\xea\x8a\x6e\x83\x97\x50\xb6\x6e\x6f\xda\xb1\xe2\x7b\x8b\xac\x2b\x22\x26\xf2\x22\x76\x3d\xae\x4b\xf6\x51\x93\x32\x4f\xac\x4a\x0a\x5e\x73\x32\x7b\x62\x4a\x0c\xfa\x69\xe5\x44\x5d\x5b\xb3\xd7\x52\xd5\xf6\x39\x51\x3a\xd5\xfa\x74\x20\x62\x08\xd1\x4b\x77\x0d\x91\x2b\xde\x8d\xfc\xec\xdc\x06\x57\x12\xce\xdb\x20\xd8\x0a\xf0\xb7\x86\x34\x7d\x59\x2b\x9b\x6f\xb3\x37\x46\x31\x91\xbf\xe0\x24\x87\xe8\x71\x04\xb7\xb7\xbe\xdf\xd8\xe3\x6a\xb3\xcd\xca\xbc\x72\x94\xfe\x82\xb0\x44\xce\x70\x8d\x60\x0a\xa6\x41\x61\x26\x15\x05\x23\x61\x89\xd0\x48\xcd\x1a\x87\x1a\x2f\x90\x6b\xbc\xdb\x95\x47\x87\xba\x22\xa4\x19\xb8\x23\x24\xd8\x44\x43\x75\x9a\x63\xde\xa8\xbd\x13\x36\xaf\x5a\x42\x1d\x8d\x67\x5d\x32\xd9\xcc\x69\x6e\xce\xba\x54\x0d\x9d\xa3\x68\x08\xe3\x3a\x9a\xa4\xfe\x19\x56\x0a\x33\x62\x90\x9e\xc6\x3e\xed\xf4\xa3\xf4\x6d\x10\x5c\x41\x34\x2c\x11\x05\x94\x44\x7d\x40\x0a\x44\x43\x2f\x3a\x0e\xd6\x85\x77\x7e\x36\xe5\xdf\x9b\xba\x42\xa5\x91\xee\xf3\xcf\xfe\x9f\xb4\xab\x3b\x45\x58\x6e\xc1\x14\x08\x2b\xc9\xb9\xdc\x30\x91\x37\xb2\xfa\xc2\x2d\xf0\x30\xaf\xf9\xe4\x4c\x90\x4c\x18\x54\x0d\x6f\xf6\xdf\xc7\x8f\xa0\x88\xc8\x11\xbe\x61\x0f\xe1\x1b\x0d\x17\x0b\xef\x65\xef\xe3\x9f\xb6\x8d\x5b\x0e\x97\xb3\x74\x4e\xda\x52\xe9\x57\x89\x6f\xb4\x5b\xb1\x26\xcc\x31\x0a\xa3\x19\xcf\x56\xdb\xfd\x2b\xbf\x07\x4a\xdb\xab\x79\x42\xd2\x79\xc2\x59\xe8\x6b\x4b\xab\x4f\x93\x9a\x37\xcf\x66\xfe\x63\xc8\xbd\x25\x7f\x1f\xf5\x4c\xe4\x53\xdc\x7b\x98\x90\xfb\x8e\x72\xfd\x09\xbe\x0f\x62\xfb\x4e\xa6\x75\x9b\x9e\xff\x2b\x8e\x07\xfc\x76\xec\xce\x7c\x4a\x06\x0f\x9b\xc5\xbe\x9b\xae\x35\xdf\x99\x9f\x4b\xa2\x59\xe6\x02\xb7\xd1\xec\xdd\x11\xee\x9d\x89\x8c\xf6\xab\xaf\x2b\x40\xed\x22\x4d\x04\x05\x66\xec\xeb\xb1\x85\x71\x8d\xf0\xee\xf5\x95\x43\x6a\x09\x2b\x8c\xa9\xf4\x45\x92\x58\x02\x66\x61\x2b\x24\x55\x9e\xec\x34\x0e\x13\xa6\x15\x72\xdb\x65\x04\xb5\xc2\x0b\x5b\xaa\x66\x9e\xab\x71\x5e\x75\xad\x45\x14\xff\xe0\x13\xc9\x46\x1d\xa4\xd1\x03\x0d\xbe\x23\x69\xe3\xce\x24\xc5\x34\xfe\x61\x9e\xb8\x0b\xd8\x14\x2c\x2b\x80\x09\xca\xec\x5a\xa2\x81\x19\x37\xe9\xbb\xa0\xee\x17\x0c\x15\x51\x59\xb1\x8d\xd2\xb2\xe6\x86\x55\x1c\x1b\x44\x6d\xfd\x82\x25\x66\xa4\xd6\xb8\x4b\x43\xce\x4c\x51\x2f\x6d\x1b\x1c\x76\xa7\xc9\x20\x4d\xbb\x0d\x5b\x62\x14\x62\x52\x12\x6d\x50\x25\xc1\xf0\x46\xae\xee\x7b\x6b\xbf\xda\x17\xe3\xbc\xab\x2a\x14\x1a\xb4\x2c\xd1\xb0\x12\x75\xc0\xce\xd9\x44\x11\x0a\x18\x7a\x72\x0c\x43\x4f\x86\x0c\x95\x48\x84\x63\xa7\xb4\x8d\x08\x70\xcc\x99\x61\x25\x31\xc8\xb7\x50\x90\x35\x9e\xc0\x58\x85\xd2\x3e\xfa\x2a\xc4\x11\x95\xd7\x08\x64\x29\x6b\xe3\xab\xa6\x96\xca\x80\x5c\xd9\x1b\x91\x1f\x4e\xe1\xf7\xc7\x50\xf8\x78\x8a\xc2\x0d\x3a\xbe\xc4\x03\x03\x4b\x69\x0a\x54\x48\xc1\xa8\xad\x5d\xd8\x8c\x84\x8a\x09\xa0\x72\x23\xc2\xd2\xfe\x60\x4f\x3a\xb2\xb2\x44\xca\x88\x69\xd9\xfd\xfa\xe9\xc8\xd9\x0a\x6d\xbc\x99\x2c\x2b\xee\x26\x10\x0d\x96\xb5\x4f\x33\xf9\xf8\x6e\x26\xaf\x76\x99\xb4\x1c\x5a\xaa\x36\x08\x44\x7d\xa5\x28\x6b\x91\xa1\x32\x84\x09\x47\xb0\x7f\x97\x4d\x8d\x6a\xd2\xda\xbf\x2d\x29\x70\x9c\x44\x6d\x84\x57\xc6\xd2\xe4\xa5\x7d\x0b\x31\x2e\x33\x03\x7a\xbe\x4c\xc1\x19\x43\xa6\xbb\x85\x60\x57\x6a\x3c\x15\xba\x66\xaa\xad\x26\x4b\x59\x0b\x5b\xc4\x61\x29\x6f\x06\xcb\xff\xfd\x49\x9f\x73\xb4\xeb\x94\xda\xc2\xd4\x60\xdc\x82\x2d\xe5\x4d\xbf\xea\x0f\x36\x6f\x0f\x61\xcf\x46\x2d\x78\x10\xee\xca\x86\xc3\x81\xbc\x7b\x79\x6d\x0d\xab\x14\x13\x19\xab\x08\x87\x0c\x85\x51\x92\xd1\xcf\x0e\xa5\x05\xea\xe3\x08\xb6\xb4\xbd\x57\x63\x97\xda\xba\xd6\xf6\xdf\xb6\xf4\x07\x3b\x45\x5b\xf1\xba\x36\x9c\xe3\xca\xc4\xba\x20\xea\x83\x2d\xef\x4d\x2b\x36\xd5\xa3\xf7\xb9\xdc\x05\xa2\x31\x33\x7d\xef\x79\x87\x56\x5c\x29\x34\x66\x6b\x77\x79\xd6\x87\xa6\x31\x3e\x44\x51\x91\x4d\xab\xd5\xb6\x8a\xfe\xba\xf9\x0c\xa2\x51\xb6\x90\x74\xe1\xb8\xc6\x67\x0a\xdc\xef\x0c\xc6\x71\x34\xe0\xc5\x13\x70\xe7\x48\xfe\x2c\x27\x26\x9c\xe5\xe2\xc2\xd2\x04\xf7\x58\x59\x49\x65\x88\x30\x4f\xfd\x39\x48\x83\x93\xfa\xcf\xe0\x5d\x8f\x0c\x10\x91\x15\x52\x45\xe9\xbf\xff\xe5\x97\xb2\xe2\x49\xda\xb7\xb8\x00\x73\x43\x96\xcd\x37\x94\xee\xf6\x5e\x1c\x9f\x9f\xb9\x6f\x3c\x55\xea\x2e\xec\x65\x91\xfe\xdf\xfd\xc7\xbf\x7b\xf4\x74\x9e\x98\x22\x1c\x7d\xe3\x4c\x8d\x47\xff\x4a\x78\x8d\xe3\xc1\x4b\x1b\x3f\x45\x91\x05\x4f\xe6\x49\x6b\xc4\x6e\xff\x5b\x0f\xfc\x98\xd5\xb1\x2b\xb1\xdf\xff\x35\x3a\xad\x04\xdd\xbf\xe5\x0a\x9a\xbd\xa9\xdd\xaa\x4d\x52\x43\x4f\x87\xba\xd2\x6f\x55\x8d\x5f\x00\xe6\x27\x61\xab\xe2\x18\xc7\x13\x12\x12\xd1\x5e\x7b\x36\x90\x68\x5b\x92\x4e\x22\xc3\xe9\x7e\x11\x2e\x3c\xd2\xe7\x52\xd1\xa2\x1c\xca\x44\x9b\x12\xfd\x46\xb9\xcd\xa4\x83\x6d\x4e\x6f\xe7\x3b\xd3\x27\x01\x8d\x69\xb0\x20\xfb\x24\x8f\x0d\xb5\xdf\xa5\x1f\x1d\xea\xf4\xc9\xc0\x09\xa1\x06\x40\x53\xa1\x9e\x00\x72\x2a\x0b\xae\xb1\x3d\x91\x86\xd1\x2e\xfd\x33\x42\xb0\x48\x9f\x4f\x84\x47\xd9\xcf\xc4\x19\x74\x45\x6a\x9e\xf4\x4b\x74\x57\x75\xf6\x14\x97\xbe\x9b\xde\x5b\x5f\xac\x4a\xd0\x74\x77\x97\x93\x3d\xf9\x41\x45\xa4\x2d\x89\xed\x4f\x17\x82\xd3\xfb\x49\xeb\x5a\xd6\x2a\x43\x5b\xba\xfc\x45\x58\xbb\x9a\x47\x87\x16\xaf\xee\xd8\x66\x74\xd6\x71\xd4\xd6\x3d\x3d\x46\x7a\xe7\x28\x69\xd2\xee\x74\xdb\x1e\x5b\x03\x1d\xe0\x6b\xac\x24\xdc\xde\x26\x4b\x2e\x97\x6d\xd3\x3e\x10\xd8\xf1\xef\x4b\xa2\x8e\xe2\xe8\xce\x68\xfa\x5e\xa7\xeb\x71\x06\xe7\xf2\xe3\x53\xff\x95\x94\x06\x55\x7f\xf0\x3f\x66\xa2\xf9\xfe\xdd\x39\x3d\xfa\xfd\x42\x3a\xfa\x41\x83\xeb\x68\x3f\xf5\x45\x40\x30\xe2\xbe\x68\x5a\x4a\xba\x4d\xcf\xe7\x89\xff\x01\xd7\x7f\x02\x00\x00\xff\xff\x43\x46\xa7\xd4\xd1\x25\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 9681, mode: os.FileMode(420), modTime: time.Unix(1514327144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
